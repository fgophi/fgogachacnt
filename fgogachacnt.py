#!/usr/bin/env python3
#
# Fate/Grand Order のガチャ結果画面のスクショのカードを数え上げます
#

import cv2
import numpy as np
import argparse
from pathlib import Path
from collections import Counter
import csv
import sys

progname = "FGOガチャカウント"
version = "0.0.1"

Item_dir = Path(__file__).resolve().parent / Path("item/")
Servant_dir = Path(__file__).resolve().parent / Path("item/Servant/")
CE_dir = Path(__file__).resolve().parent / Path("item/CE/")
train_card = Path(__file__).resolve().parent / Path("card.xml") # カード下部認識用

hasher = cv2.img_hash.PHash_create()

#アイテム認識用
servant_0star = ['アンリマユ',]
servant_1star = ['アーラシュ', 'アマデウス', '小次郎', 'マタ・ハリ', 'スパルタクス',
            'アステリオス', 'イアソン', 'バーソロミュー', 'コルデー',]
servant_2star = ['弁慶', 'レオニダス', 'ゲオルギウス', 'ティーチ', 'アンデルセン',
            'シェイクスピア', '呪腕', 'サンソン', 'ファントム', 'カリギュラ',
            'エイリーク', 'パリス', 'ガレス', '陳宮', 'サロメ',]
servant_3star = ['カエサル', '剣ジル', 'ロビンフッド', 'エウリュアレ', 'クー・フーリン',
            'プニキ', 'ロムルス', 'メドゥーサ', 'ブーディカ', '牛若丸', 'アレキサンダー',
            'メディア', 'メフィストフェレス', '荊軻', '呂布', 'ダレイオス', '清姫',
            'ダビデ', 'ヘクトール', 'ディルムッド', 'フェルグス', 'パラケルスス', 'バベッジ',
            'ジキル', '子ギル', 'ジェロニモ', 'ビリー', '百貌', '小太郎', '静謐', '俵',
            '胤舜', 'アヴィケブロン', 'ウィリアム・テル', 'マンドリカルド',]
servant_4star = ['リリィ']         
exp_1star = ['全種火', '剣種火', '槍種火', '弓種火',
             '騎種火', '術種火','殺種火','狂種火',]          
exp_2star = ['全灯火', '剣灯火', '槍灯火', '弓灯火',
             '騎灯火', '術灯火','殺灯火','狂灯火',]
exp_3star = ['全大火', '剣大火', '槍大火', '弓大火',
             '騎大火', '術大火','殺大火','狂大火',]
exp_4star = ['全猛火', '剣猛火', '槍猛火', '弓猛火',
             '騎猛火', '術猛火','殺猛火','狂猛火',]
exp_5star = ['全業火', '剣業火', '槍業火', '弓業火',
             '騎業火', '術業火','殺業火','狂業火',]
status_1star = ['全★1ATK', '剣★1ATK', '槍★1ATK', '弓★1ATK',
                '騎★1ATK', '術★1ATK','殺★1ATK','狂★1ATK',
                '全★1HP', '剣★1HP', '槍★1HP', '弓★1HP',
                '騎★1HP', '術★1HP','殺★1HP','狂★1HP',]
status_2star = ['全★2ATK', '剣★2ATK', '槍★2ATK', '弓★2ATK',
                '騎★2ATK', '術★2ATK','殺★2ATK','狂★2ATK',
                '全★2HP', '剣★2HP', '槍★2HP', '弓★2HP',
                '騎★2HP', '術★2HP','殺★2HP','狂★2HP',]
status_3star = ['全★3ATK', '剣★3ATK', '槍★3ATK', '弓★3ATK',
                '騎★3ATK', '術★3ATK','殺★3ATK','狂★3ATK',
                '全★3HP', '剣★3HP', '槍★3HP', '弓★3HP',
                '騎★3HP', '術★3HP','殺★3HP','狂★3HP',]
ce_1star = ['闘争', '連鎖', '断絶', '覚醒', '飢餓',]
ce_2star = ['慈愛', '繁栄', '欺瞞', '同調', '暗澹',]
ce_3star = ['アゾット剣', '偽臣の書', '青の黒鍵', '緑の黒鍵', '赤の黒鍵',
            '凛のペンダント', '魔道書', '龍脈', '魔術鉱石', '竜種', '葦の海',
            'ムーンセル', 'ルーンストーン', 'そして船は征く', '魔猪', '時計塔',
            '魔力計', 'シュトルヒリッター', '阿蘭若', 'モータード・キュイラッシェ',
            'ライオンのぬいぐるみ', 'ルーの光輪', '波濤の獣',
            'セルフ・ギアス・スクロール', '過ぎ去りし夢', 'ミラクル求道者',
            'フリーランサー', '叡智の光', '深窓の麗人',]
ccode_1star = [ 'コード：モータル', 'コード：ブルート', 'コード：コープス',
            'コード：イービル', 'コード：ニンバス',]
ccode_2star = ['コード：ブレス', 'コード：グリッター', 'コード：バースト',           
            'コード：フォーカス', 'コード：キュア―',]

std_item = servant_0star + servant_1star + servant_2star \
           + servant_3star + servant_4star \
           + exp_1star + exp_2star + exp_3star + exp_4star + exp_5star \
           + status_1star + status_2star + status_3star \
           + ce_1star + ce_2star + ce_3star \
           + ccode_1star + ccode_2star

dist_local_servant = {
}

dist_local_ce = {
}
dist_local_ce_center = {
}

dist_servant = {
    'アンリマユ':np.array([[86, 15, 11, 14, 15, 20, 17, 202]], dtype='uint8'),
    'リリィ':np.array([[43, 106, 218, 241, 225, 245, 40, 118]], dtype='uint8'),
    'アステリオス':np.array([[157, 188, 38, 55, 218, 217, 109, 51]], dtype='uint8'),
    'アマデウス':np.array([[209, 149, 96, 224, 148, 211, 223, 14]], dtype='uint8'),
    'アーラシュ':np.array([[23, 86, 108, 108, 185, 225, 195, 19]], dtype='uint8'),
    'イアソン':np.array([[163, 241, 232, 233, 241, 241, 185, 93]], dtype='uint8'),
    'コルデー':np.array([[219, 122, 194, 204, 149, 219, 172, 165]], dtype='uint8'),
    'スパルタクス':np.array([[183, 181, 106, 102, 137, 113, 94, 47]], dtype='uint8'),
    'バーソロミュー':np.array([[212, 21, 38, 46, 11, 250, 111, 152]], dtype='uint8'),
    'マタ・ハリ':np.array([[115, 120, 172, 167, 30, 241, 224, 23]], dtype='uint8'),
    '小次郎':np.array([[145, 181, 164, 140, 204, 149, 76, 142]], dtype='uint8'),
    'アンデルセン':np.array([[249, 121, 166, 198, 91, 57, 229, 166]], dtype='uint8'),
    'エイリーク':np.array([[217, 218, 7, 37, 114, 27, 101, 103]], dtype='uint8'),
    'カリギュラ':np.array([[87, 214, 168, 108, 198, 241, 15, 163]], dtype='uint8'),
    'ガレス':np.array([[243, 241, 216, 102, 177, 217, 100, 55]], dtype='uint8'),
    'ゲオルギウス':np.array([[95, 58, 164, 228, 38, 15, 217, 115]], dtype='uint8'),
    'サロメ':np.array([[25, 218, 6, 44, 100, 51, 109, 182]], dtype='uint8'),
    'サンソン':np.array([[113, 233, 237, 46, 11, 209, 115, 164]], dtype='uint8'),
    'シェイクスピア':np.array([[91, 248, 172, 39, 188, 159, 115, 150]], dtype='uint8'),
    'ティーチ':np.array([[91, 152, 25, 6, 152, 185, 198, 59]], dtype='uint8'),
    'パリス':np.array([[179, 248, 234, 165, 248, 91, 100, 158]], dtype='uint8'),
    'ファントム':np.array([[219, 155, 60, 60, 131, 207, 115, 108]], dtype='uint8'),
    'レオニダス':np.array([[90, 26, 27, 240, 184, 113, 228, 15]], dtype='uint8'),
    '呪腕':np.array([[120, 91, 39, 134, 155, 121, 71, 180]], dtype='uint8'),
    '弁慶':np.array([[31, 17, 224, 228, 25, 57, 193, 46]], dtype='uint8'),
    '陳宮':np.array([[83, 88, 161, 166, 16, 179, 204, 39]], dtype='uint8'),
    'アレキサンダー':np.array([[243, 18, 7, 12, 27, 105, 29, 140]], dtype='uint8'),
    'アヴィケブロン':np.array([[119, 82, 155, 30, 7, 60, 249, 216]], dtype='uint8'),
    'ウィリアム・テル':np.array([[92, 67, 129, 222, 11, 12, 86, 124]], dtype='uint8'),
    'エウリュアレ':np.array([[241, 120, 134, 230, 121, 210, 45, 236]], dtype='uint8'),
    'カエサル':np.array([[83, 87, 132, 244, 179, 32, 14, 60]], dtype='uint8'),
    'クー・フーリン':np.array([[244, 209, 78, 62, 176, 154, 71, 100]], dtype='uint8'),
    'ジェロニモ':np.array([[126, 18, 7, 4, 131, 220, 199, 168]], dtype='uint8'),
    'ジキル':np.array([[243, 89, 13, 102, 176, 219, 209, 236]], dtype='uint8'),
    'ダビデ':np.array([[215, 248, 104, 228, 160, 91, 45, 30]], dtype='uint8'),
    'ダレイオス':np.array([[134, 135, 120, 92, 39, 96, 87, 142]], dtype='uint8'),
    'ディルムッド':np.array([[30, 146, 252, 60, 193, 108, 141, 42]], dtype='uint8'),
    'バベッジ':np.array([[245, 22, 13, 94, 3, 110, 19, 144]], dtype='uint8'),
    'パラケルスス':np.array([[149, 28, 96, 228, 39, 83, 13, 118]], dtype='uint8'),
    'ビリー':np.array([[246, 211, 240, 180, 161, 240, 27, 45]], dtype='uint8'),
    'フェルグス':np.array([[157, 156, 178, 180, 160, 147, 252, 238]], dtype='uint8'),
    'ブーディカ':np.array([[25, 154, 143, 158, 254, 67, 108, 38]], dtype='uint8'),
    'プニキ':np.array([[215, 220, 172, 182, 154, 78, 113, 140]], dtype='uint8'),
    'ヘクトール':np.array([[212, 212, 15, 30, 19, 161, 179, 100]], dtype='uint8'),
    'マンドリカルド':np.array([[91, 24, 132, 70, 0, 71, 205, 252]], dtype='uint8'),
    'メディア':np.array([[80, 50, 39, 78, 19, 121, 67, 166]], dtype='uint8'),
    'メドゥーサ':np.array([[211, 215, 160, 160, 25, 121, 102, 134]], dtype='uint8'),
    'メフィストフェレス':np.array([[217, 154, 110, 94, 23, 177, 227, 107]], dtype='uint8'),
    'ロビンフッド':np.array([[116, 86, 5, 20, 19, 244, 195, 140]], dtype='uint8'),
    'ロムルス':np.array([[148, 157, 105, 224, 163, 24, 67, 36]], dtype='uint8'),
    '俵':np.array([[249, 90, 131, 164, 15, 82, 117, 176]], dtype='uint8'),
    '剣ジル':np.array([[153, 156, 232, 99, 6, 210, 252, 166]], dtype='uint8'),
    '呂布':np.array([[94, 18, 3, 14, 15, 22, 27, 33]], dtype='uint8'),
    '子ギル':np.array([[241, 219, 104, 176, 139, 120, 179, 132]], dtype='uint8'),
    '小太郎':np.array([[52, 188, 78, 79, 43, 179, 140, 70]], dtype='uint8'),
    '清姫':np.array([[19, 225, 32, 23, 137, 115, 92, 44]], dtype='uint8'),
    '牛若丸':np.array([[113, 114, 103, 140, 139, 209, 140, 220]], dtype='uint8'),
    '百貌':np.array([[86, 22, 11, 6, 3, 116, 83, 232]], dtype='uint8'),
    '胤舜':np.array([[89, 232, 206, 241, 163, 23, 241, 152]], dtype='uint8'),
    '荊軻':np.array([[83, 92, 47, 38, 180, 139, 200, 183]], dtype='uint8'),
    '静謐':np.array([[120, 51, 173, 140, 131, 248, 3, 228]], dtype='uint8'),
}
dist_ce = {
    '断絶':np.array([[226, 19, 153, 131, 67, 205, 74, 116]], dtype='uint8'),
    '覚醒':np.array([[171, 47, 180, 123, 15, 188, 127, 164]], dtype='uint8'),
    '連鎖':np.array([[161, 169, 26, 169, 126, 215, 252, 235]], dtype='uint8'),
    '闘争':np.array([[53, 17, 16, 246, 207, 206, 203, 108]], dtype='uint8'),
    '飢餓':np.array([[114, 86, 140, 176, 3, 152, 115, 230]], dtype='uint8'),
    '同調':np.array([[48, 185, 140, 200, 99, 52, 115, 112]], dtype='uint8'),
    '慈愛':np.array([[246, 22, 137, 67, 23, 249, 1, 245]], dtype='uint8'),
    '暗澹':np.array([[244, 70, 161, 48, 3, 172, 95, 236]], dtype='uint8'),
    '欺瞞':np.array([[249, 218, 188, 218, 79, 164, 211, 60]], dtype='uint8'),
    '繁栄':np.array([[245, 220, 146, 208, 30, 181, 89, 124]], dtype='uint8'),
    'そして船は征く':np.array([[125, 195, 194, 124, 40, 94, 147, 118]], dtype='uint8'),
    'アゾット剣':np.array([[220, 102, 137, 152, 39, 204, 23, 108]], dtype='uint8'),
    'シュトルヒリッター':np.array([[153, 200, 72, 30, 147, 115, 151, 224]], dtype='uint8'),
    'セルフ・ギアス・スクロール':np.array([[223, 195, 140, 252, 131, 46, 211, 22]], dtype='uint8'),
    'フリーランサー':np.array([[76, 120, 11, 229, 49, 14, 27, 38]], dtype='uint8'),
    'ミラクル求道者':np.array([[124, 140, 171, 227, 137, 48, 3, 115]], dtype='uint8'),
    'ムーンセル':np.array([[25, 137, 195, 242, 43, 51, 208, 131]], dtype='uint8'),
    'モータード・キュイラッシェ':np.array([[221, 24, 97, 148, 155, 236, 140, 230]], dtype='uint8'),
    'ライオンのぬいぐるみ':np.array([[135, 177, 56, 203, 41, 119, 249, 206]], dtype='uint8'),
    'ルーの光輪':np.array([[107, 248, 158, 70, 99, 54, 147, 30]], dtype='uint8'),
    'ルーンストーン':np.array([[253, 173, 15, 48, 161, 228, 147, 156]], dtype='uint8'),
    '偽臣の書':np.array([[211, 134, 172, 115, 44, 252, 108, 7]], dtype='uint8'),
    '凛のペンダント':np.array([[115, 210, 189, 124, 12, 134, 151, 248]], dtype='uint8'),
    '叡智の光':np.array([[125, 90, 22, 36, 143, 210, 246, 228]], dtype='uint8'),
    '時計塔':np.array([[94, 195, 97, 88, 27, 158, 151, 60]], dtype='uint8'),
    '波濤の獣':np.array([[213, 194, 163, 252, 62, 252, 252, 156]], dtype='uint8'),
    '深窓の麗人':np.array([[211, 248, 38, 199, 140, 62, 31, 113]], dtype='uint8'),
    '竜種':np.array([[15, 230, 242, 219, 104, 114, 28, 10]], dtype='uint8'),
    '緑の黒鍵':np.array([[249, 249, 169, 28, 11, 108, 19, 244]], dtype='uint8'),
    '葦の海':np.array([[217, 209, 14, 110, 187, 188, 85, 202]], dtype='uint8'),
    '赤の黒鍵':np.array([[219, 94, 57, 122, 142, 240, 127, 10]], dtype='uint8'),
    '過ぎ去りし夢':np.array([[215, 46, 46, 240, 147, 150, 50, 210]], dtype='uint8'),
    '阿蘭若':np.array([[82, 66, 249, 156, 169, 241, 179, 54]], dtype='uint8'),
    '青の黒鍵':np.array([[94, 66, 143, 92, 11, 60, 83, 140]], dtype='uint8'),
    '魔力計':np.array([[114, 210, 12, 230, 131, 120, 91, 38]], dtype='uint8'),
    '魔猪':np.array([[253, 218, 11, 36, 147, 86, 110, 44]], dtype='uint8'),
    '魔術鉱石':np.array([[219, 216, 184, 186, 166, 244, 211, 230]], dtype='uint8'),
    '魔道書':np.array([[189, 208, 233, 108, 19, 216, 91, 26]], dtype='uint8'),
    '龍脈':np.array([[115, 90, 140, 228, 156, 70, 244, 10]], dtype='uint8'),
}
dist_ce_center = {
    '断絶':np.array([[47, 194, 242, 16, 186, 126, 244, 47]], dtype='uint8'),
    '覚醒':np.array([[131, 2, 203, 43, 76, 124, 62, 243]], dtype='uint8'),
    '連鎖':np.array([[156, 17, 141, 97, 198, 37, 142, 255]], dtype='uint8'),
    '闘争':np.array([[113, 165, 38, 67, 26, 230, 199, 185]], dtype='uint8'),
    '飢餓':np.array([[227, 60, 214, 219, 237, 103, 51, 158]], dtype='uint8'),
    '同調':np.array([[3, 241, 89, 141, 204, 110, 109, 239]], dtype='uint8'),
    '慈愛':np.array([[78, 253, 203, 207, 202, 176, 209, 17]], dtype='uint8'),
    '暗澹':np.array([[197, 60, 211, 60, 211, 44, 131, 4]], dtype='uint8'),
    '欺瞞':np.array([[46, 99, 5, 222, 15, 168, 242, 72]], dtype='uint8'),
    '繁栄':np.array([[13, 207, 66, 250, 42, 114, 213, 209]], dtype='uint8'),
    'そして船は征く':np.array([[4, 43, 176, 7, 232, 139, 64, 2]], dtype='uint8'),
    'アゾット剣':np.array([[86, 156, 153, 250, 195, 17, 120, 130]], dtype='uint8'),
    'シュトルヒリッター':np.array([[29, 180, 124, 236, 220, 236, 200, 201]], dtype='uint8'),
    'セルフ・ギアス・スクロール':np.array([[235, 181, 224, 233, 152, 228, 29, 113]], dtype='uint8'),
    'フリーランサー':np.array([[156, 177, 7, 117, 194, 150, 165, 137]], dtype='uint8'),
    'ミラクル求道者':np.array([[69, 134, 207, 113, 188, 75, 51, 207]], dtype='uint8'),
    'ムーンセル':np.array([[177, 188, 14, 89, 252, 203, 243, 242]], dtype='uint8'),
    'モータード・キュイラッシェ':np.array([[137, 22, 55, 249, 232, 254, 238, 228]], dtype='uint8'),
    'ライオンのぬいぐるみ':np.array([[91, 128, 180, 95, 193, 196, 59, 48]], dtype='uint8'),
    'ルーの光輪':np.array([[87, 240, 184, 188, 61, 191, 158, 158]], dtype='uint8'),
    'ルーンストーン':np.array([[25, 200, 117, 39, 206, 148, 171, 23]], dtype='uint8'),
    '偽臣の書':np.array([[139, 204, 211, 33, 60, 14, 228, 158]], dtype='uint8'),
    '凛のペンダント':np.array([[194, 131, 145, 169, 18, 180, 72, 38]], dtype='uint8'),
    '叡智の光':np.array([[41, 207, 156, 243, 230, 103, 188, 105]], dtype='uint8'),
    '時計塔':np.array([[244, 86, 21, 13, 6, 0, 2, 0]], dtype='uint8'),
    '波濤の獣':np.array([[108, 151, 22, 23, 131, 140, 212, 66]], dtype='uint8'),
    '深窓の麗人':np.array([[11, 227, 205, 60, 247, 138, 30, 112]], dtype='uint8'),
    '竜種':np.array([[21, 90, 75, 239, 123, 70, 33, 152]], dtype='uint8'),
    '緑の黒鍵':np.array([[34, 251, 73, 33, 45, 0, 8, 132]], dtype='uint8'),
    '葦の海':np.array([[73, 133, 117, 90, 241, 194, 13, 127]], dtype='uint8'),
    '赤の黒鍵':np.array([[233, 38, 208, 120, 63, 14, 8, 238]], dtype='uint8'),
    '過ぎ去りし夢':np.array([[227, 150, 77, 252, 80, 71, 191, 235]], dtype='uint8'),
    '阿蘭若':np.array([[158, 99, 112, 133, 0, 188, 137, 210]], dtype='uint8'),
    '青の黒鍵':np.array([[166, 175, 184, 225, 197, 2, 5, 128]], dtype='uint8'),
    '魔力計':np.array([[139, 212, 94, 212, 254, 173, 75, 65]], dtype='uint8'),
    '魔猪':np.array([[84, 85, 75, 171, 173, 205, 45, 169]], dtype='uint8'),
    '魔術鉱石':np.array([[13, 49, 192, 7, 238, 114, 87, 23]], dtype='uint8'),
    '魔道書':np.array([[3, 185, 246, 79, 238, 246, 85, 118]], dtype='uint8'),
    '龍脈':np.array([[14, 179, 1, 12, 9, 64, 25, 64]], dtype='uint8'),
}
dist_ccode = {
    'コード：イービル':np.array([[211, 159, 134, 167, 104, 100, 89, 76]], dtype='uint8'),
    'コード：キュア―':np.array([[182, 35, 115, 156, 44, 201, 130, 49]], dtype='uint8'),
    'コード：グリッター':np.array([[43, 183, 68, 79, 51, 49, 142, 46]], dtype='uint8'),
    'コード：コープス':np.array([[47, 190, 64, 47, 211, 203, 20, 52]], dtype='uint8'),
    'コード：ニンバス':np.array([[242, 191, 76, 60, 193, 206, 1, 77]], dtype='uint8'),
    'コード：バースト':np.array([[179, 62, 254, 170, 191, 251, 251, 107]], dtype='uint8'),
    'コード：フォーカス':np.array([[179, 63, 206, 253, 171, 234, 175, 175]], dtype='uint8'),
    'コード：ブルート':np.array([[198, 62, 75, 230, 88, 155, 115, 204]], dtype='uint8'),
    'コード：ブレス':np.array([[163, 195, 82, 237, 185, 94, 62, 172]], dtype='uint8'),
    'コード：モータル':np.array([[45, 60, 194, 105, 248, 195, 72, 243]], dtype='uint8'),
}
dist_exp = {
    '全種火':np.array([[13, 204, 211, 243, 54, 52, 126, 110]], dtype='uint8'),
    '剣種火':np.array([[11, 206, 242, 243, 178, 124, 90, 108]], dtype='uint8'),
    '弓種火':np.array([[11, 206, 242, 243, 178, 124, 90, 108]], dtype='uint8'),
    '槍種火':np.array([[11, 206, 242, 243, 178, 124, 90, 108]], dtype='uint8'),
    '殺種火':np.array([[11, 206, 243, 243, 62, 126, 94, 76]], dtype='uint8'),
    '狂種火':np.array([[11, 206, 243, 243, 62, 126, 94, 76]], dtype='uint8'),
    '術種火':np.array([[11, 206, 243, 243, 62, 126, 94, 76]], dtype='uint8'),
    '騎種火':np.array([[11, 206, 243, 243, 62, 126, 94, 76]], dtype='uint8'),
    '全灯火':np.array([[9, 12, 212, 195, 211, 251, 28, 255]], dtype='uint8'),
    '剣灯火':np.array([[187, 204, 212, 211, 229, 126, 60, 255]], dtype='uint8'),
    '弓灯火':np.array([[187, 204, 212, 211, 229, 127, 60, 254]], dtype='uint8'),
    '槍灯火':np.array([[187, 204, 212, 211, 229, 126, 60, 255]], dtype='uint8'),
    '殺灯火':np.array([[187, 204, 212, 211, 229, 126, 60, 255]], dtype='uint8'),
    '狂灯火':np.array([[187, 204, 212, 211, 229, 127, 60, 254]], dtype='uint8'),
    '術灯火':np.array([[187, 204, 212, 211, 229, 126, 60, 255]], dtype='uint8'),
    '騎灯火':np.array([[187, 204, 212, 211, 229, 126, 60, 255]], dtype='uint8'),
    '全大火':np.array([[103, 84, 200, 203, 153, 62, 38, 201]], dtype='uint8'),
    '剣大火':np.array([[115, 77, 250, 232, 141, 188, 34, 129]], dtype='uint8'),
    '弓大火':np.array([[115, 77, 242, 232, 141, 188, 102, 1]], dtype='uint8'),
    '槍大火':np.array([[115, 77, 242, 232, 141, 188, 102, 1]], dtype='uint8'),
    '殺大火':np.array([[115, 77, 250, 232, 141, 188, 34, 129]], dtype='uint8'),
    '狂大火':np.array([[115, 77, 242, 232, 141, 188, 102, 1]], dtype='uint8'),
    '術大火':np.array([[115, 77, 242, 232, 141, 188, 102, 1]], dtype='uint8'),
    '騎大火':np.array([[115, 77, 250, 232, 141, 188, 34, 129]], dtype='uint8'),
    '全猛火':np.array([[243, 100, 70, 208, 153, 107, 53, 45]], dtype='uint8'),
    '剣猛火':np.array([[243, 100, 70, 210, 185, 11, 52, 37]], dtype='uint8'),
    '弓猛火':np.array([[243, 100, 70, 210, 185, 11, 52, 37]], dtype='uint8'),
    '槍猛火':np.array([[243, 100, 70, 210, 185, 11, 52, 37]], dtype='uint8'),
    '殺猛火':np.array([[243, 100, 70, 210, 145, 11, 180, 37]], dtype='uint8'),
    '狂猛火':np.array([[243, 100, 70, 210, 185, 11, 52, 37]], dtype='uint8'),
    '術猛火':np.array([[243, 100, 70, 210, 185, 11, 52, 37]], dtype='uint8'),
    '騎猛火':np.array([[243, 100, 70, 210, 185, 11, 52, 37]], dtype='uint8'),
    '全業火':np.array([[99, 68, 66, 210, 210, 202, 252, 246]], dtype='uint8'),
    '剣業火':np.array([[35, 68, 66, 210, 210, 202, 250, 246]], dtype='uint8'),
    '弓業火':np.array([[99, 68, 66, 210, 210, 234, 250, 182]], dtype='uint8'),
    '槍業火':np.array([[99, 68, 66, 210, 210, 234, 250, 182]], dtype='uint8'),
    '殺業火':np.array([[99, 68, 66, 210, 210, 234, 250, 182]], dtype='uint8'),
    '狂業火':np.array([[99, 68, 66, 210, 210, 234, 250, 182]], dtype='uint8'),
    '術業火':np.array([[35, 68, 66, 210, 210, 202, 250, 246]], dtype='uint8'),
    '騎業火':np.array([[35, 68, 66, 210, 210, 202, 250, 246]], dtype='uint8'),
    '全大火変換':np.array([[103, 84, 200, 203, 153, 62, 54, 201]], dtype='uint8'),
    '剣大火変換':np.array([[115, 77, 250, 232, 143, 188, 102, 1]], dtype='uint8'),
    '弓大火変換':np.array([[115, 77, 250, 232, 141, 188, 2, 129]], dtype='uint8'),
    '槍大火変換':np.array([[216, 25, 94, 176, 95, 227, 208, 41]], dtype='uint8'),
    '殺大火変換':np.array([[115, 77, 250, 232, 143, 188, 102, 1]], dtype='uint8'),
    '狂大火変換':np.array([[115, 77, 250, 232, 143, 188, 102, 1]], dtype='uint8'),
    '術大火変換':np.array([[115, 77, 250, 232, 141, 188, 2, 129]], dtype='uint8'),
    '騎大火変換':np.array([[115, 77, 250, 232, 141, 188, 2, 129]], dtype='uint8'),
    '全灯火変換':np.array([[9, 12, 208, 195, 211, 250, 28, 251]], dtype='uint8'),
    '剣灯火変換':np.array([[187, 204, 212, 211, 229, 127, 60, 254]], dtype='uint8'),
    '弓灯火変換':np.array([[187, 204, 212, 211, 229, 127, 60, 254]], dtype='uint8'),
    '槍灯火変換':np.array([[155, 204, 212, 211, 165, 126, 60, 251]], dtype='uint8'),
    '殺灯火変換':np.array([[155, 204, 212, 211, 165, 126, 60, 251]], dtype='uint8'),
    '狂灯火変換':np.array([[187, 204, 212, 211, 229, 127, 60, 254]], dtype='uint8'),
    '術灯火変換':np.array([[155, 204, 212, 211, 165, 126, 60, 251]], dtype='uint8'),
    '騎灯火変換':np.array([[187, 204, 212, 211, 229, 127, 60, 254]], dtype='uint8'),
    '全種火変換':np.array([[13, 76, 211, 243, 182, 180, 62, 126]], dtype='uint8'),
    '剣種火変換':np.array([[11, 206, 243, 243, 62, 126, 94, 76]], dtype='uint8'),
    '弓種火変換':np.array([[11, 206, 242, 243, 178, 126, 90, 76]], dtype='uint8'),
    '槍種火変換':np.array([[11, 206, 243, 243, 62, 126, 94, 76]], dtype='uint8'),
    '殺種火変換':np.array([[11, 206, 242, 243, 178, 126, 90, 76]], dtype='uint8'),
    '狂種火変換':np.array([[11, 206, 243, 243, 62, 126, 94, 76]], dtype='uint8'),
    '術種火変換':np.array([[11, 206, 242, 243, 178, 126, 90, 76]], dtype='uint8'),
    '騎種火変換':np.array([[11, 206, 242, 243, 178, 126, 90, 76]], dtype='uint8'),
}
dist_tanebi_class = {
    '全種火':np.array([[161, 223, 40, 15, 42, 43, 135, 5]], dtype='uint8'),
    '剣種火':np.array([[216, 159, 133, 33, 120, 35, 63, 26]], dtype='uint8'),
    '弓種火':np.array([[118, 47, 153, 39, 141, 42, 106, 5]], dtype='uint8'),
    '槍種火':np.array([[227, 227, 37, 12, 120, 176, 43, 73]], dtype='uint8'),
    '殺種火':np.array([[233, 39, 22, 25, 224, 41, 167, 26]], dtype='uint8'),
    '狂種火':np.array([[25, 103, 230, 30, 58, 27, 247, 1]], dtype='uint8'),
    '術種火':np.array([[21, 157, 103, 99, 57, 86, 50, 9]], dtype='uint8'),
    '騎種火':np.array([[153, 111, 54, 52, 230, 35, 119, 24]], dtype='uint8'),
    '全灯火':np.array([[160, 223, 104, 15, 46, 40, 6, 133]], dtype='uint8'),
    '剣灯火':np.array([[217, 159, 135, 33, 56, 35, 62, 10]], dtype='uint8'),
    '弓灯火':np.array([[118, 47, 137, 39, 141, 42, 106, 5]], dtype='uint8'),
    '槍灯火':np.array([[231, 99, 37, 44, 120, 178, 107, 81]], dtype='uint8'),
    '殺灯火':np.array([[233, 166, 22, 25, 160, 41, 167, 26]], dtype='uint8'),
    '狂灯火':np.array([[25, 103, 230, 222, 58, 27, 127, 129]], dtype='uint8'),
    '術灯火':np.array([[157, 157, 39, 98, 56, 86, 50, 9]], dtype='uint8'),
    '騎灯火':np.array([[153, 111, 54, 52, 226, 35, 123, 24]], dtype='uint8'),
    '全大火':np.array([[161, 215, 40, 15, 106, 42, 199, 5]], dtype='uint8'),
    '剣大火':np.array([[217, 27, 165, 33, 120, 43, 62, 26]], dtype='uint8'),
    '弓大火':np.array([[118, 47, 137, 37, 173, 42, 106, 5]], dtype='uint8'),
    '槍大火':np.array([[227, 35, 37, 44, 120, 178, 43, 89]], dtype='uint8'),
    '殺大火':np.array([[233, 38, 22, 57, 224, 57, 39, 26]], dtype='uint8'),
    '狂大火':np.array([[17, 103, 230, 222, 58, 27, 127, 137]], dtype='uint8'),
    '術大火':np.array([[149, 141, 38, 98, 56, 214, 114, 24]], dtype='uint8'),
    '騎大火':np.array([[185, 107, 54, 60, 238, 35, 127, 24]], dtype='uint8'),
    '全猛火':np.array([[161, 159, 40, 15, 106, 43, 215, 5]], dtype='uint8'),
    '剣猛火':np.array([[217, 31, 197, 35, 120, 43, 62, 10]], dtype='uint8'),
    '弓猛火':np.array([[115, 47, 24, 39, 109, 42, 106, 7]], dtype='uint8'),
    '槍猛火':np.array([[225, 7, 5, 44, 120, 50, 107, 65]], dtype='uint8'),
    '殺猛火':np.array([[233, 39, 86, 27, 228, 43, 39, 158]], dtype='uint8'),
    '狂猛火':np.array([[89, 103, 230, 90, 58, 27, 119, 33]], dtype='uint8'),
    '術猛火':np.array([[85, 157, 102, 99, 60, 86, 50, 9]], dtype='uint8'),
    '騎猛火':np.array([[153, 111, 54, 54, 238, 35, 127, 24]], dtype='uint8'),
    '全業火':np.array([[33, 191, 40, 42, 106, 42, 215, 5]], dtype='uint8'),
    '剣業火':np.array([[153, 155, 133, 163, 120, 43, 63, 26]], dtype='uint8'),
    '弓業火':np.array([[115, 175, 8, 43, 13, 42, 106, 5]], dtype='uint8'),
    '槍業火':np.array([[227, 163, 5, 44, 120, 50, 107, 81]], dtype='uint8'),
    '殺業火':np.array([[233, 166, 22, 59, 228, 43, 39, 26]], dtype='uint8'),
    '狂業火':np.array([[25, 103, 230, 122, 58, 27, 127, 33]], dtype='uint8'),
    '術業火':np.array([[21, 189, 38, 98, 57, 150, 118, 8]], dtype='uint8'),
    '騎業火':np.array([[153, 235, 54, 62, 238, 163, 119, 56]], dtype='uint8'),
    '全大火変換':np.array([[161, 223, 56, 15, 106, 43, 199, 5]], dtype='uint8'),
    '剣大火変換':np.array([[216, 154, 165, 33, 120, 43, 63, 26]], dtype='uint8'),
    '弓大火変換':np.array([[119, 47, 137, 45, 173, 106, 106, 21]], dtype='uint8'),
    '槍大火変換':np.array([[230, 227, 39, 44, 120, 176, 43, 89]], dtype='uint8'),
    '殺大火変換':np.array([[224, 166, 22, 25, 224, 41, 47, 158]], dtype='uint8'),
    '狂大火変換':np.array([[16, 103, 230, 222, 58, 27, 127, 137]], dtype='uint8'),
    '術大火変換':np.array([[149, 141, 103, 99, 56, 86, 58, 9]], dtype='uint8'),
    '騎大火変換':np.array([[185, 107, 54, 60, 238, 35, 126, 24]], dtype='uint8'),
    '全灯火変換':np.array([[161, 223, 41, 15, 42, 41, 134, 5]], dtype='uint8'),
    '剣灯火変換':np.array([[216, 158, 135, 33, 58, 33, 62, 10]], dtype='uint8'),
    '弓灯火変換':np.array([[118, 46, 137, 37, 12, 41, 106, 5]], dtype='uint8'),
    '槍灯火変換':np.array([[227, 103, 37, 12, 120, 179, 106, 81]], dtype='uint8'),
    '殺灯火変換':np.array([[233, 38, 22, 25, 160, 41, 39, 26]], dtype='uint8'),
    '狂灯火変換':np.array([[17, 103, 230, 222, 58, 27, 127, 129]], dtype='uint8'),
    '術灯火変換':np.array([[29, 159, 39, 99, 56, 87, 50, 9]], dtype='uint8'),
    '騎灯火変換':np.array([[152, 239, 55, 20, 230, 163, 118, 56]], dtype='uint8'),
    '全種火変換':np.array([[160, 223, 120, 15, 46, 41, 6, 5]], dtype='uint8'),
    '剣種火変換':np.array([[217, 159, 133, 33, 58, 33, 62, 8]], dtype='uint8'),
    '弓種火変換':np.array([[118, 47, 153, 37, 12, 41, 106, 5]], dtype='uint8'),
    '槍種火変換':np.array([[227, 103, 37, 13, 120, 49, 106, 81]], dtype='uint8'),
    '殺種火変換':np.array([[224, 166, 22, 25, 160, 41, 39, 158]], dtype='uint8'),
    '狂種火変換':np.array([[17, 103, 230, 30, 58, 25, 119, 1]], dtype='uint8'),
    '術種火変換':np.array([[148, 157, 39, 99, 56, 151, 114, 8]], dtype='uint8'),
    '騎種火変換':np.array([[152, 239, 55, 20, 230, 163, 119, 24]], dtype='uint8'),
}
dist_status = {
    '全★1ATK':np.array([[35, 26, 54, 225, 201, 71, 156, 31]], dtype='uint8'),
    '剣★1ATK':np.array([[49, 122, 22, 227, 217, 151, 156, 155]], dtype='uint8'),
    '弓★1ATK':np.array([[49, 56, 22, 227, 217, 147, 156, 155]], dtype='uint8'),
    '槍★1ATK':np.array([[49, 120, 22, 227, 217, 23, 156, 155]], dtype='uint8'),
    '殺★1ATK':np.array([[49, 24, 22, 227, 217, 147, 156, 155]], dtype='uint8'),
    '狂★1ATK':np.array([[49, 26, 6, 227, 219, 23, 158, 155]], dtype='uint8'),
    '術★1ATK':np.array([[49, 58, 22, 227, 217, 23, 156, 155]], dtype='uint8'),
    '騎★1ATK':np.array([[49, 58, 22, 227, 217, 23, 156, 155]], dtype='uint8'),
    '全★1HP':np.array([[225, 165, 38, 124, 181, 60, 78, 222]], dtype='uint8'),
    '剣★1HP':np.array([[225, 181, 38, 252, 180, 61, 222, 218]], dtype='uint8'),
    '弓★1HP':np.array([[225, 181, 38, 252, 180, 61, 238, 218]], dtype='uint8'),
    '槍★1HP':np.array([[225, 181, 38, 252, 180, 61, 206, 218]], dtype='uint8'),
    '殺★1HP':np.array([[225, 181, 38, 252, 180, 61, 206, 218]], dtype='uint8'),
    '狂★1HP':np.array([[225, 181, 38, 124, 180, 61, 206, 218]], dtype='uint8'),
    '術★1HP':np.array([[225, 181, 38, 252, 180, 61, 206, 218]], dtype='uint8'),
    '騎★1HP':np.array([[225, 181, 38, 252, 180, 61, 206, 218]], dtype='uint8'),
    '全★2ATK':np.array([[35, 56, 122, 225, 201, 91, 92, 27]], dtype='uint8'),
    '剣★2ATK':np.array([[35, 56, 114, 225, 201, 247, 28, 154]], dtype='uint8'),
    '弓★2ATK':np.array([[35, 56, 114, 225, 201, 119, 28, 154]], dtype='uint8'),
    '槍★2ATK':np.array([[35, 56, 114, 225, 201, 87, 28, 155]], dtype='uint8'),
    '殺★2ATK':np.array([[35, 56, 114, 225, 201, 119, 28, 154]], dtype='uint8'),
    '狂★2ATK':np.array([[35, 56, 50, 227, 201, 95, 28, 154]], dtype='uint8'),
    '術★2ATK':np.array([[35, 56, 114, 225, 201, 219, 28, 155]], dtype='uint8'),
    '騎★2ATK':np.array([[35, 56, 114, 225, 201, 123, 28, 154]], dtype='uint8'),
    '全★2HP':np.array([[225, 177, 46, 92, 28, 41, 124, 123]], dtype='uint8'),
    '剣★2HP':np.array([[225, 241, 108, 204, 184, 57, 232, 219]], dtype='uint8'),
    '弓★2HP':np.array([[225, 241, 108, 204, 184, 57, 106, 155]], dtype='uint8'),
    '槍★2HP':np.array([[225, 241, 108, 204, 184, 57, 75, 159]], dtype='uint8'),
    '殺★2HP':np.array([[225, 241, 108, 206, 184, 57, 234, 219]], dtype='uint8'),
    '狂★2HP':np.array([[225, 241, 46, 78, 60, 61, 75, 155]], dtype='uint8'),
    '術★2HP':np.array([[225, 241, 100, 78, 184, 61, 111, 223]], dtype='uint8'),
    '騎★2HP':np.array([[225, 241, 100, 78, 184, 57, 110, 219]], dtype='uint8'),
    '全★3ATK':np.array([[39, 56, 122, 67, 201, 207, 29, 26]], dtype='uint8'),
    '剣★3ATK':np.array([[39, 56, 112, 225, 201, 202, 92, 154]], dtype='uint8'),
    '弓★3ATK':np.array([[39, 56, 120, 225, 201, 78, 28, 26]], dtype='uint8'),
    '槍★3ATK':np.array([[39, 56, 120, 225, 201, 78, 28, 26]], dtype='uint8'),
    '殺★3ATK':np.array([[39, 56, 120, 225, 201, 78, 28, 154]], dtype='uint8'),
    '狂★3ATK':np.array([[39, 56, 58, 227, 203, 78, 28, 26]], dtype='uint8'),
    '術★3ATK':np.array([[39, 56, 120, 225, 201, 78, 28, 26]], dtype='uint8'),
    '騎★3ATK':np.array([[39, 56, 120, 225, 201, 78, 28, 26]], dtype='uint8'),
    '全★3HP':np.array([[193, 185, 62, 206, 24, 61, 125, 82]], dtype='uint8'),
    '剣★3HP':np.array([[197, 185, 176, 206, 184, 53, 237, 82]], dtype='uint8'),
    '弓★3HP':np.array([[197, 185, 176, 206, 56, 53, 109, 82]], dtype='uint8'),
    '槍★3HP':np.array([[197, 185, 176, 206, 56, 53, 109, 82]], dtype='uint8'),
    '殺★3HP':np.array([[197, 185, 176, 206, 184, 53, 237, 82]], dtype='uint8'),
    '狂★3HP':np.array([[197, 185, 56, 206, 24, 53, 109, 82]], dtype='uint8'),
    '術★3HP':np.array([[197, 185, 176, 206, 56, 53, 109, 82]], dtype='uint8'),
    '騎★3HP':np.array([[197, 185, 176, 206, 56, 53, 109, 82]], dtype='uint8'),
    '全★1ATK変換':np.array([[3, 120, 249, 203, 248, 173, 14, 188]], dtype='uint8'),
    '剣★1ATK変換':np.array([[3, 120, 251, 71, 248, 173, 14, 180]], dtype='uint8'),
    '弓★1ATK変換':np.array([[3, 120, 251, 71, 248, 173, 14, 180]], dtype='uint8'),
    '槍★1ATK変換':np.array([[3, 120, 249, 71, 248, 175, 14, 180]], dtype='uint8'),
    '殺★1ATK変換':np.array([[3, 120, 251, 71, 248, 175, 14, 180]], dtype='uint8'),
    '狂★1ATK変換':np.array([[3, 120, 91, 7, 248, 143, 14, 180]], dtype='uint8'),
    '術★1ATK変換':np.array([[3, 120, 251, 71, 248, 143, 14, 180]], dtype='uint8'),
    '騎★1ATK変換':np.array([[3, 120, 251, 7, 248, 175, 14, 180]], dtype='uint8'),
    '全★1HP変換':np.array([[129, 241, 121, 15, 248, 165, 14, 244]], dtype='uint8'),
    '剣★1HP変換':np.array([[131, 241, 249, 143, 248, 173, 14, 244]], dtype='uint8'),
    '弓★1HP変換':np.array([[131, 241, 249, 15, 248, 173, 14, 244]], dtype='uint8'),
    '槍★1HP変換':np.array([[131, 241, 249, 15, 248, 173, 14, 244]], dtype='uint8'),
    '殺★1HP変換':np.array([[131, 241, 249, 15, 248, 165, 14, 244]], dtype='uint8'),
    '狂★1HP変換':np.array([[131, 241, 121, 15, 120, 165, 14, 244]], dtype='uint8'),
    '術★1HP変換':np.array([[131, 241, 249, 15, 248, 173, 14, 244]], dtype='uint8'),
    '騎★1HP変換':np.array([[131, 241, 249, 15, 248, 165, 14, 244]], dtype='uint8'),
    '全★2ATK変換':np.array([[3, 120, 249, 203, 248, 173, 14, 188]], dtype='uint8'),
    '剣★2ATK変換':np.array([[35, 121, 249, 195, 248, 173, 14, 188]], dtype='uint8'),
    '弓★2ATK変換':np.array([[35, 121, 249, 195, 248, 173, 14, 188]], dtype='uint8'),
    '槍★2ATK変換':np.array([[35, 121, 249, 195, 216, 173, 14, 60]], dtype='uint8'),
    '殺★2ATK':np.array([[35, 121, 249, 195, 216, 173, 14, 60]], dtype='uint8'),
    '狂★2ATK変換':np.array([[35, 121, 249, 135, 216, 173, 14, 60]], dtype='uint8'),
    '術★2ATK変換':np.array([[3, 121, 249, 195, 248, 173, 14, 188]], dtype='uint8'),
    '騎★2ATK変換':np.array([[3, 121, 249, 195, 248, 173, 14, 188]], dtype='uint8'),
    '全★2HP変換':np.array([[129, 249, 121, 15, 120, 173, 14, 108]], dtype='uint8'),
    '剣★2HP変換':np.array([[139, 249, 249, 143, 120, 173, 14, 236]], dtype='uint8'),
    '弓★2HP変換':np.array([[131, 249, 249, 143, 120, 173, 14, 238]], dtype='uint8'),
    '槍★2HP変換':np.array([[139, 249, 249, 143, 120, 173, 14, 236]], dtype='uint8'),
    '殺★2HP変換':np.array([[139, 249, 249, 143, 120, 173, 14, 236]], dtype='uint8'),
    '狂★2HP変換':np.array([[131, 249, 121, 15, 120, 173, 14, 110]], dtype='uint8'),
    '術★2HP変換':np.array([[131, 249, 249, 143, 120, 173, 14, 238]], dtype='uint8'),
    '騎★2HP変換':np.array([[131, 249, 249, 15, 120, 173, 14, 110]], dtype='uint8'),
    '全★3ATK変換':np.array([[7, 91, 248, 249, 216, 143, 14, 124]], dtype='uint8'),
    '剣★3ATK変換':np.array([[7, 91, 248, 249, 248, 143, 6, 124]], dtype='uint8'),
    '弓★3ATK変換':np.array([[7, 91, 248, 249, 248, 135, 14, 126]], dtype='uint8'),
    '槍★3ATK変換':np.array([[7, 91, 248, 249, 248, 135, 14, 126]], dtype='uint8'),
    '殺★3ATK変換':np.array([[7, 91, 248, 249, 248, 143, 6, 124]], dtype='uint8'),
    '狂★3ATK変換':np.array([[7, 91, 248, 249, 216, 143, 14, 126]], dtype='uint8'),
    '術★3ATK変換':np.array([[7, 91, 248, 249, 216, 135, 14, 126]], dtype='uint8'),
    '騎★3ATK変換':np.array([[7, 91, 248, 249, 248, 143, 6, 124]], dtype='uint8'),
    '全★3HP変換':np.array([[135, 89, 248, 248, 248, 143, 14, 124]], dtype='uint8'),
    '剣★3HP変換':np.array([[135, 217, 248, 249, 248, 135, 14, 244]], dtype='uint8'),
    '弓★3HP変換':np.array([[135, 217, 248, 249, 248, 167, 14, 116]], dtype='uint8'),
    '槍★3HP変換':np.array([[135, 217, 248, 249, 248, 167, 14, 118]], dtype='uint8'),
    '殺★3HP変換':np.array([[135, 217, 248, 249, 248, 167, 14, 116]], dtype='uint8'),
    '狂★3HP変換':np.array([[135, 89, 248, 249, 120, 135, 14, 118]], dtype='uint8'),
    '術★3HP変換':np.array([[135, 217, 248, 249, 248, 135, 14, 124]], dtype='uint8'),
    '騎★3HP変換':np.array([[135, 217, 248, 249, 248, 167, 14, 118]], dtype='uint8'),
}
dist_status_class = {
    '全★1ATK':np.array([[225, 159, 120, 15, 38, 42, 199, 5]], dtype='uint8'),
    '剣★1ATK':np.array([[153, 159, 167, 35, 122, 35, 62, 10]], dtype='uint8'),
    '弓★1ATK':np.array([[114, 47, 136, 47, 173, 42, 106, 5]], dtype='uint8'),
    '槍★1ATK':np.array([[227, 35, 37, 44, 120, 50, 107, 81]], dtype='uint8'),
    '殺★1ATK':np.array([[168, 167, 22, 27, 160, 41, 47, 158]], dtype='uint8'),
    '狂★1ATK':np.array([[17, 103, 230, 158, 58, 27, 127, 129]], dtype='uint8'),
    '術★1ATK':np.array([[157, 157, 38, 98, 56, 86, 58, 9]], dtype='uint8'),
    '騎★1ATK':np.array([[185, 111, 54, 62, 234, 35, 123, 24]], dtype='uint8'),
    '全★1HP':np.array([[97, 143, 121, 42, 118, 42, 215, 37]], dtype='uint8'),
    '剣★1HP':np.array([[217, 155, 135, 33, 84, 43, 127, 10]], dtype='uint8'),
    '弓★1HP':np.array([[119, 175, 29, 170, 5, 42, 106, 42]], dtype='uint8'),
    '槍★1HP':np.array([[231, 227, 5, 44, 120, 178, 107, 91]], dtype='uint8'),
    '殺★1HP':np.array([[233, 166, 86, 41, 225, 43, 229, 154]], dtype='uint8'),
    '狂★1HP':np.array([[81, 39, 246, 170, 30, 27, 117, 169]], dtype='uint8'),
    '術★1HP':np.array([[85, 141, 103, 34, 61, 214, 114, 9]], dtype='uint8'),
    '騎★1HP':np.array([[153, 235, 23, 36, 230, 35, 119, 24]], dtype='uint8'),
    '全★2ATK':np.array([[101, 143, 125, 42, 38, 42, 199, 37]], dtype='uint8'),
    '剣★2ATK':np.array([[217, 155, 135, 33, 120, 35, 63, 10]], dtype='uint8'),
    '弓★2ATK':np.array([[119, 39, 29, 33, 5, 106, 106, 21]], dtype='uint8'),
    '槍★2ATK':np.array([[231, 99, 5, 44, 120, 178, 107, 81]], dtype='uint8'),
    '殺★2ATK':np.array([[233, 166, 22, 57, 225, 41, 167, 154]], dtype='uint8'),
    '狂★2ATK':np.array([[25, 103, 230, 26, 26, 27, 245, 161]], dtype='uint8'),
    '術★2ATK':np.array([[213, 141, 103, 98, 57, 214, 114, 24]], dtype='uint8'),
    '騎★2ATK':np.array([[153, 233, 23, 20, 228, 163, 119, 56]], dtype='uint8'),
    '全★2HP':np.array([[69, 143, 125, 42, 38, 42, 199, 165]], dtype='uint8'),
    '剣★2HP':np.array([[219, 153, 135, 33, 4, 33, 119, 26]], dtype='uint8'),
    '弓★2HP':np.array([[119, 33, 29, 160, 5, 106, 106, 53]], dtype='uint8'),
    '槍★2HP':np.array([[247, 227, 7, 44, 88, 176, 43, 91]], dtype='uint8'),
    '殺★2HP':np.array([[249, 164, 86, 41, 165, 41, 229, 154]], dtype='uint8'),
    '狂★2HP':np.array([[89, 165, 246, 40, 24, 25, 229, 225]], dtype='uint8'),
    '術★2HP':np.array([[213, 141, 71, 34, 33, 214, 114, 28]], dtype='uint8'),
    '騎★2HP':np.array([[153, 225, 23, 20, 196, 161, 119, 56]], dtype='uint8'),
    '全★3ATK':np.array([[161, 137, 121, 40, 38, 40, 31, 37]], dtype='uint8'),
    '剣★3ATK':np.array([[216, 155, 133, 33, 120, 43, 63, 26]], dtype='uint8'),
    '弓★3ATK':np.array([[119, 47, 137, 43, 173, 106, 106, 21]], dtype='uint8'),
    '槍★3ATK':np.array([[227, 35, 37, 44, 120, 178, 107, 81]], dtype='uint8'),
    '殺★3ATK':np.array([[233, 38, 22, 57, 224, 57, 39, 26]], dtype='uint8'),
    '狂★3ATK':np.array([[25, 103, 230, 122, 58, 27, 127, 33]], dtype='uint8'),
    '術★3ATK':np.array([[149, 141, 102, 98, 56, 86, 58, 9]], dtype='uint8'),
    '騎★3ATK':np.array([[185, 107, 54, 60, 238, 35, 127, 24]], dtype='uint8'),
    '全★3HP':np.array([[161, 139, 56, 42, 102, 42, 199, 5]], dtype='uint8'),
    '剣★3HP':np.array([[217, 153, 133, 33, 120, 43, 62, 26]], dtype='uint8'),
    '弓★3HP':np.array([[119, 33, 29, 32, 141, 106, 106, 21]], dtype='uint8'),
    '槍★3HP':np.array([[231, 99, 37, 44, 120, 178, 107, 81]], dtype='uint8'),
    '殺★3HP':np.array([[225, 166, 22, 25, 224, 57, 39, 158]], dtype='uint8'),
    '狂★3HP':np.array([[89, 101, 230, 122, 58, 27, 119, 33]], dtype='uint8'),
    '術★3HP':np.array([[213, 141, 103, 98, 57, 214, 50, 13]], dtype='uint8'),
    '騎★3HP':np.array([[153, 105, 23, 52, 230, 35, 119, 24]], dtype='uint8'),
    '全★1ATK変換':np.array([[225, 143, 121, 15, 38, 41, 199, 5]], dtype='uint8'),
    '剣★1ATK変換':np.array([[217, 159, 165, 35, 42, 35, 62, 8]], dtype='uint8'),
    '弓★1ATK変換':np.array([[115, 47, 137, 47, 172, 43, 106, 5]], dtype='uint8'),
    '槍★1ATK変換':np.array([[227, 39, 37, 45, 120, 51, 106, 81]], dtype='uint8'),
    '殺★1ATK変換':np.array([[233, 38, 22, 25, 170, 41, 39, 26]], dtype='uint8'),
    '狂★1ATK変換':np.array([[17, 103, 230, 30, 58, 27, 126, 1]], dtype='uint8'),
    '術★1ATK変換':np.array([[29, 159, 39, 99, 56, 87, 58, 9]], dtype='uint8'),
    '騎★1ATK変換':np.array([[185, 111, 54, 62, 234, 35, 62, 24]], dtype='uint8'),
    '全★1HP変換':np.array([[196, 142, 121, 43, 54, 43, 87, 165]], dtype='uint8'),
    '剣★1HP変換':np.array([[217, 154, 133, 33, 124, 43, 126, 10]], dtype='uint8'),
    '弓★1HP変換':np.array([[119, 46, 29, 41, 5, 43, 106, 37]], dtype='uint8'),
    '槍★1HP変換':np.array([[231, 227, 37, 44, 120, 179, 107, 89]], dtype='uint8'),
    '殺★1HP変換':np.array([[224, 166, 86, 9, 228, 41, 101, 154]], dtype='uint8'),
    '狂★1HP変換':np.array([[80, 39, 246, 186, 30, 27, 119, 169]], dtype='uint8'),
    '術★1HP変換':np.array([[84, 143, 103, 35, 60, 215, 50, 9]], dtype='uint8'),
    '騎★1HP変換':np.array([[152, 235, 23, 52, 230, 163, 119, 58]], dtype='uint8'),
    '全★2ATK変換':np.array([[225, 143, 121, 15, 38, 41, 199, 5]], dtype='uint8'),
    '剣★2ATK変換':np.array([[216, 158, 135, 33, 44, 33, 62, 10]], dtype='uint8'),
    '弓★2ATK変換':np.array([[119, 38, 29, 33, 5, 107, 106, 5]], dtype='uint8'),
    '槍★2ATK変換':np.array([[231, 227, 39, 13, 88, 177, 42, 73]], dtype='uint8'),
    '殺★2ATK':np.array([[224, 166, 22, 25, 224, 41, 39, 158]], dtype='uint8'),
    '狂★2ATK変換':np.array([[17, 103, 230, 218, 30, 25, 119, 129]], dtype='uint8'),
    '術★2ATK変換':np.array([[213, 141, 103, 99, 60, 215, 50, 9]], dtype='uint8'),
    '騎★2ATK変換':np.array([[153, 111, 23, 52, 230, 33, 118, 24]], dtype='uint8'),
    '全★2HP変換':np.array([[212, 142, 125, 43, 38, 41, 87, 165]], dtype='uint8'),
    '剣★2HP変換':np.array([[216, 154, 135, 33, 4, 33, 22, 26]], dtype='uint8'),
    '弓★2HP変換':np.array([[118, 34, 31, 161, 5, 169, 106, 44]], dtype='uint8'),
    '槍★2HP変換':np.array([[247, 227, 7, 12, 88, 177, 107, 89]], dtype='uint8'),
    '殺★2HP変換':np.array([[249, 166, 22, 9, 164, 41, 231, 154]], dtype='uint8'),
    '狂★2HP変換':np.array([[93, 166, 246, 248, 30, 25, 69, 249]], dtype='uint8'),
    '術★2HP変換':np.array([[212, 141, 103, 35, 36, 214, 114, 24]], dtype='uint8'),
    '騎★2HP変換':np.array([[152, 233, 23, 20, 198, 161, 119, 56]], dtype='uint8'),
    '全★3ATK変換':np.array([[160, 138, 123, 41, 46, 40, 47, 37]], dtype='uint8'),
    '剣★3ATK変換':np.array([[217, 154, 165, 33, 122, 43, 62, 26]], dtype='uint8'),
    '弓★3ATK変換':np.array([[118, 46, 137, 41, 173, 43, 106, 4]], dtype='uint8'),
    '槍★3ATK変換':np.array([[226, 163, 39, 44, 120, 178, 42, 72]], dtype='uint8'),
    '殺★3ATK変換':np.array([[233, 38, 22, 57, 232, 57, 39, 26]], dtype='uint8'),
    '狂★3ATK変換':np.array([[17, 103, 230, 222, 58, 27, 127, 137]], dtype='uint8'),
    '術★3ATK変換':np.array([[148, 141, 103, 99, 56, 214, 114, 24]], dtype='uint8'),
    '騎★3ATK変換':np.array([[185, 107, 54, 60, 238, 35, 127, 24]], dtype='uint8'),
    '全★3HP変換':np.array([[161, 170, 57, 42, 46, 43, 199, 5]], dtype='uint8'),
    '剣★3HP変換':np.array([[217, 152, 133, 33, 120, 43, 62, 26]], dtype='uint8'),
    '弓★3HP変換':np.array([[118, 34, 29, 33, 133, 43, 106, 36]], dtype='uint8'),
    '槍★3HP変換':np.array([[230, 227, 39, 44, 120, 176, 43, 89]], dtype='uint8'),
    '殺★3HP変換':np.array([[224, 166, 22, 25, 224, 57, 103, 158]], dtype='uint8'),
    '狂★3HP変換':np.array([[81, 103, 230, 250, 58, 27, 127, 217]], dtype='uint8'),
    '術★3HP変換':np.array([[213, 141, 103, 99, 60, 214, 50, 9]], dtype='uint8'),
    '騎★3HP変換':np.array([[152, 233, 23, 52, 230, 163, 119, 56]], dtype='uint8'),
}
std_item_dic = {}
for i in std_item:
    std_item_dic[i] = 0

def imread(filename, flags=cv2.IMREAD_COLOR, dtype=np.uint8):
    """
    OpenCVのimreadが日本語ファイル名が読めない対策
    """
    try:
        n = np.fromfile(filename, dtype)
        img = cv2.imdecode(n, flags)
        return img
    except Exception as e:
        print(e)
        return None

class ScreenShot:
    """
    スクリーンショットを表すクラス
    """
    def __init__(self, img_rgb, svm_card, mode, debug=False):
        TRAINING_IMG_WIDTH = 1906
        threshold = 80
        self.img_rgb_orig = img_rgb
        self.img_gray_orig = cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY)

        game_screen = self.extract_game_screen(debug)
        if debug:
            cv2.imwrite('game_screen.png', game_screen)

        height_g, width_g, _ = game_screen.shape
        wscale = (1.0 * width_g) / TRAINING_IMG_WIDTH
        resizeScale = 1 / wscale

        if resizeScale > 1:
            matImgResize = 1 / resizeScale
            self.img_rgb = cv2.resize(game_screen, (0,0), fx=resizeScale, fy=resizeScale, interpolation=cv2.INTER_CUBIC)
        else:
            self.img_rgb = cv2.resize(game_screen, (0,0), fx=resizeScale, fy=resizeScale, interpolation=cv2.INTER_AREA)

        if debug:
            cv2.imwrite('game_screen_resize.png', self.img_rgb)

        self.img_gray = cv2.cvtColor(self.img_rgb, cv2.COLOR_BGR2GRAY)
        item_pts = self.img2points(mode)
        self.items = []
 
        for i, pt in enumerate(item_pts):
            item_img_rgb = self.img_rgb[pt[1] :  pt[3],  pt[0] :  pt[2]]
            item_img_gray = self.img_gray[pt[1] :  pt[3],  pt[0] :  pt[2]]
            self.items.append(Item(item_img_rgb, svm_card, debug))
            if debug:
                cv2.imwrite('item' + str(i) + '.png', item_img_rgb)

        self.itemlist = self.makelist()
        self.allitemlist = self.makelallist()
        self.allitemdic = dict(Counter(self.allitemlist))

    def makelist(self):
        """
        アイテムをリスト出力
        """
        itemlist = []
        for i, item in enumerate(self.items):
            name = item.name
            itemlist.append(name)
        return itemlist

    def extract_game_screen(self, debug=False):
        """
        額縁の影響を除去してどのスクショでも同じ画面を切り出す
        """
        height, width = self.img_rgb_orig.shape[:2]
        lower_w = np.array([100,100,100]) 
        upper_w = np.array([255,255,255])
        img_mask_w = cv2.inRange(self.img_rgb_orig, lower_w, upper_w)

        contours, hierarchy = cv2.findContours(img_mask_w, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

        button = {}

        for i, cnt in enumerate(contours):
            area = cv2.contourArea(cnt)
            if area > 7000:
                epsilon = 0.01*cv2.arcLength(cnt,True)
                approx = cv2.approxPolyDP(cnt,epsilon,True)
                if len(approx) == 4:        
                    ret = cv2.boundingRect(cnt)
                    pts = [ ret[0], ret[1], ret[0] + ret[2], ret[1] + ret[3] ]
                    if pts[1] > height*3/4 and pts[3] > height*3/4: 
                        if hierarchy[0, i][3] in button: #子要素がある場合親要素を消して追加
                            del button[hierarchy[0, i][3]]
                            button[i] = pts
                        else:
                            button[i] = pts

        button_pts = list(button.values())
        button_pts.sort()

        ### ボタンの位置から高さ・幅を決めてしまう
        ### ずれがわかりやすいように所持サーヴァントの角で切る ipad 2018 (71,339)
        ### 画像の中心: 1024
        ### (71, 339) (1977, 1315)
        ##ボタンの位置: [[241, 1223, 501, 1315], [641, 1223, 901, 1315],
        ##         [1036, 1223, 1404, 1315], [1543, 1223, 1803, 1315]]
        button_width = button_pts[3][2] - button_pts[0][0]

        cut_x1 = int((width - (1977 - 71)*button_width/(1803 - 241))/2)
        cut_x2 = width - cut_x1
        cut_y1 = button_pts[0][3] - int((1315 - 339)*button_width/(1803 - 241))
        cut_y2 = button_pts[0][3]

        gamescreen = self.img_rgb_orig[cut_y1:cut_y2,cut_x1:cut_x2]

        return gamescreen

    def makelallist(self):
        """
        アイテムを出力
        """
        itemlist = []
        for i, item in enumerate(self.items):
            name = item.name
            itemlist.append(name + "")
        return itemlist

    def img2points(self, mode):
        """
        カードが出現する座標
        """

        if mode == "10":
            pts = [(71, 154, 335, 442), (371, 154, 635, 442), (671, 154, 935, 442),
                   (971, 154, 1235, 442), (1271, 154, 1535, 442), (1571, 154, 1835, 442),
                   (371, 515, 635, 803), (671, 515, 935, 803),
                   (971, 515, 1235, 803), (1271, 515,1535, 803)]
        else:
            pts = [(71, 154, 335, 442), (371, 154, 635, 442), (671, 154, 935, 442),
                   (971, 154, 1235, 442), (1271, 154, 1535, 442), (1571, 154, 1835, 442),
                   (222, 515, 486, 803), (522, 515, 786, 803), (821, 515, 1085, 803),
                   (1120, 515,1384, 803), (1420, 515, 1684, 803)]
        return pts

class Item:
    def __init__(self, img_rgb, svm_card, debug=False):
        self.img_rgb = img_rgb
        self.card = self.classify_card(svm_card)
        self.name = self.classify_item()

    def make_new_servant(self):
        """
        ファイル名候補を探す
        """
        for i in range(999):
            itemfile = Servant_dir / ('servant{:0=3}'.format(i + 1) + '.png')
            if itemfile.is_file():
                continue
            else:
                cv2.imwrite(itemfile.as_posix(), self.img_rgb)
                dist_local_servant[itemfile] = compute_hash_inner(self.img_rgb)
                break
        return itemfile.stem

    def make_new_ce(self):
        """
        ファイル名候補を探す
        """
        for i in range(999):
            itemfile = CE_dir / ('ce{:0=3}'.format(i + 1) + '.png')
            if itemfile.is_file():
                continue
            else:
                cv2.imwrite(itemfile.as_posix(), self.img_rgb)
                dist_local_ce[itemfile] = compute_hash_inner(self.img_rgb)
                dist_local_ce_center[itemfile] = hasher.compute(self.img_rgb[78:163,86:190])
                break
        return itemfile.stem

    def classify_servant(self):
        """
        既所持のアイテム画像の距離を計算して保持
        """
        hash_item = compute_hash_inner(self.img_rgb) #画像の距離
        itemfiles = {}
        # 既存のアイテムとの距離を比較
        for i in dist_servant.keys():
            d = hasher.compare(hash_item, dist_servant[i])
            if d <= 15:
                itemfiles[i] = d
        if len(itemfiles) > 0:
            itemfiles = sorted(itemfiles.items(), key=lambda x:x[1])
            item = next(iter(itemfiles))
            return item[0]

        return ""

    def classify_ce(self):
        """
        既所持のアイテム画像の距離を計算して保持
        """
        hash_item = compute_hash_inner(self.img_rgb) #画像の距離

        itemfiles = {}
        # 既存のアイテムとの距離を比較
        for i in dist_ce.keys():
            d = hasher.compare(hash_item, dist_ce[i])
            if d <= 15:
                itemfiles[i] = d
        if len(itemfiles) > 0:
            itemfiles = sorted(itemfiles.items(), key=lambda x:x[1])
            item = next(iter(itemfiles))
            return item[0]
        #自動変換された礼装の判定
        hash_item = hasher.compute(self.img_rgb[78:163,86:190]) #画像の距離
        itemfiles = {}
        # 既存のアイテムとの距離を比較
        for i in dist_ce_center.keys():
            d = hasher.compare(hash_item, dist_ce_center[i])
            if d <= 15: # 10だと失敗する場合あり
                itemfiles[i] = d
        if len(itemfiles) > 0:
            itemfiles = sorted(itemfiles.items(), key=lambda x:x[1])
            item = next(iter(itemfiles))
            return item[0]

        return ""

    def classify_ccode(self):
        """
        既所持のアイテム画像の距離を計算して保持
        """
        hash_item = hasher.compute(self.img_rgb[93:180,79:187]) #画像の距離
        itemfiles = {}
        # 既存のアイテムとの距離を比較
        for i in dist_ccode.keys():
            d = hasher.compare(hash_item, dist_ccode[i])
            if d <= 15:
                itemfiles[i] = d
        if len(itemfiles) > 0:
            itemfiles = sorted(itemfiles.items(), key=lambda x:x[1])
            item = next(iter(itemfiles))
            return item[0]

        return ""

    def classify_exp(self):
        """
        既所持のアイテム画像の距離を計算して保持
        """
        hash_item = hasher.compute(self.img_rgb[78:163,86:190]) #画像の距離
        itemfiles = {}
        # 既存のアイテムとの距離を比較
        for i in dist_exp.keys():
            d = hasher.compare(hash_item, dist_exp[i])
            if d <= 15:
                itemfiles[i] = d
        if len(itemfiles) > 0:
            itemfiles = sorted(itemfiles.items(), key=lambda x:x[1])
            item = next(iter(itemfiles))
            hash_tanebi_class = self.compute_tanebi_class_hash(self.img_rgb)
            tanebiclassfiles = {}
            for i in dist_tanebi_class.keys():
                if (item[0].replace('変換', ''))[-2:] in i:
                    dtc = hasher.compare(hash_tanebi_class, dist_tanebi_class[i])
                    if dtc <= 22: #22離れることがあったので
                        tanebiclassfiles[i] = dtc
            tanebiclassfiles = sorted(tanebiclassfiles.items(), key=lambda x:x[1])
            if len(tanebiclassfiles) > 0:
                tanebiclass = next(iter(tanebiclassfiles))
                return tanebiclass[0].replace('変換', '')

##           return item[0].replace('変換', '')
            return item[0]

        return ""

    def classify_status(self):
        """
        既所持のアイテム画像の距離を計算して保持
        """
        hash_item = compute_hash_inner(self.img_rgb) #画像の距離
        itemfiles = {}
        # 既存のアイテムとの距離を比較
        for i in dist_status.keys():
            d = hasher.compare(hash_item, dist_status[i])
            if d <= 15:
                itemfiles[i] = d
        if len(itemfiles) > 0:
            itemfiles = sorted(itemfiles.items(), key=lambda x:x[1])
            item = next(iter(itemfiles))
            hash_status_class = self.compute_tanebi_class_hash(self.img_rgb)
            statusclassfiles = {}
            for i in dist_status_class.keys():
                if (item[0].replace('変換', ''))[-2:] in i:
                    dtc = hasher.compare(hash_status_class, dist_status_class[i])
                    if dtc <= 19: #18離れることがあったので(Screenshot_20200318-140020.png)
                        statusclassfiles[i] = dtc
            statusclassfiles = sorted(statusclassfiles.items(), key=lambda x:x[1])
            if len(statusclassfiles) > 0:
                statusclass = next(iter(statusclassfiles))
                return statusclass[0].replace('変換', '')

            return item[0]

        return ""

    def classify_local_servant(self):
        """
        既所持のアイテム画像の距離を計算して保持
        """
        hash_item = compute_hash_inner(self.img_rgb) #画像の距離

        itemfiles = {}
        # 既存のアイテムとの距離を比較
        for i in dist_local_servant.keys():
            d = hasher.compare(hash_item, dist_local_servant[i])
            if d <= 10:
                itemfiles[i] = d
        if len(itemfiles) > 0:
            itemfiles = sorted(itemfiles.items(), key=lambda x:x[1])
            item = next(iter(itemfiles))
            return item[0].stem

        return ""

    def classify_local_ce(self):
        """
        既所持のアイテム画像の距離を計算して保持
        """
        hash_item = compute_hash_inner(self.img_rgb) #画像の距離

        itemfiles = {}
        # 既存のアイテムとの距離を比較
        for i in dist_local_ce.keys():
            d = hasher.compare(hash_item, dist_local_ce[i])
            if d <= 10:
                itemfiles[i] = d
        if len(itemfiles) > 0:
            itemfiles = sorted(itemfiles.items(), key=lambda x:x[1])
            item = next(iter(itemfiles))
            return item[0].stem
        #自動変換された礼装の判定
        hash_item = hasher.compute(self.img_rgb[78:163,86:190]) #画像の距離
        itemfiles = {}
        # 既存のアイテムとの距離を比較
        for i in dist_local_ce_center.keys():
            d = hasher.compare(hash_item, dist_local_ce_center[i])
            if d <= 10:
                itemfiles[i] = d
        if len(itemfiles) > 0:
            itemfiles = sorted(itemfiles.items(), key=lambda x:x[1])
            item = next(iter(itemfiles))
            return item[0].stem

        return ""

    def classify_card(self, svm_card):
        """
        カード判別器
       """
        """
        カード判別器
        この場合は画像全域のハッシュをとる
        """
        # Hog特徴のパラメータ
        win_size = (120, 60)
        block_size = (16, 16)
        block_stride = (4, 4)
        cell_size = (4, 4)
        bins = 9
        test = []
        carddic = { 1:'Servant', 2:'Craft Essence', 3:'Exp. UP', 4:'Status UP', 5:"Command Code" }

        tmpimg = self.img_rgb[265:282,66:198]
        
        tmpimg = cv2.resize(tmpimg, (win_size))
        hog = cv2.HOGDescriptor(win_size, block_size, block_stride, cell_size, bins)
        test.append(hog.compute(tmpimg)) # 特徴量の格納
        test = np.array(test)
        pred = svm_card.predict(test)

        return carddic[pred[1][0][0]]

    def classify_item(self, debug=False):
        """
        アイテム判別器
        """
        if self.card == "Servant":
            item = self.classify_servant()
            if item == "":
                item = self.classify_local_servant()
            if item == "":
                item = self.make_new_servant()
        elif self.card == "Craft Essence":
            item = self.classify_ce()
            if item == "":
                item = self.classify_local_ce()
            if item == "":
                item = self.make_new_ce()
        elif self.card == "Command Code":
            item = self.classify_ccode()
        elif self.card == "Exp. UP":
            item =  self.classify_exp()
        elif self.card == "Status UP":
            item =  self.classify_status()            
        return item

    def compute_tanebi_class_hash(self, img_rgb):
        """
        種火クラス判別器
        左上のクラスマークぎりぎりのハッシュを取る
        記述した比率はiPhone6S画像の実測値
        """
        height, width = img_rgb.shape[:2]
        img = img_rgb[int(5/135*height):int(30/135*height),
                      int(5/135*width):int(30/135*width)]
        return hasher.compute(img)

def compute_hash_inner(img_rgb):
    """
    判別器
    この判別器は上部のNew!を除いた部分を比較するもの
    """
    img = img_rgb[20:,:]
    return hasher.compute(img)


def calc_dist_local_servant():
    """
    既所持のアイテム画像の距離(一次元配列)の辞書を作成して保持
    """
    files = Servant_dir.glob('**/*.png')
    for fname in files:
        img = imread(fname)
        dist_local_servant[fname] = compute_hash_inner(img)

def calc_dist_local_ce():
    """
    既所持のアイテム画像の距離(一次元配列)の辞書を作成して保持
    """
    files = CE_dir.glob('**/*.png')
    for fname in files:
        img = imread(fname)
        dist_local_ce[fname] = compute_hash_inner(img)
        dist_local_ce_center[fname] = hasher.compute(img[78:163,86:190])


def get_output(filenames, mode, debug=False):
    """
    出力内容を作成
    """
    calc_dist_local_servant()
    calc_dist_local_ce()
    svm_card = cv2.ml.SVM_load(str(train_card))

    csvfieldnames = { 'filename' : "合計",  '召喚数': "" } #CSVフィールド名用 key しか使わない
    wholelist = []
    outputcsv = [] #出力
    prev_itemlist = [] #重複チェック用
    num_summon = 0

    for filename in filenames:
        if debug:
            print(filename)
        f = Path(filename)

        if f.exists() == False:
            output = { 'filename': filename + ': Not Found' }
        else:            
            img_rgb = imread(filename)

            try:
                sc = ScreenShot(img_rgb, svm_card, mode, debug)
                #戦利品順番ルールに則った対応による出力処理
                if prev_itemlist == sc.itemlist:
                    output = ({'filename': str(filename) + ': Duplicate'})
                else:              
                    wholelist = wholelist + sc.itemlist
                    output = { 'filename': filename }
                    output.update(sc.allitemdic)
                    output['召喚数'] = mode
                    num_summon = num_summon + int(mode)
            except:
                output = ({'filename': str(filename) + ': not valid'})
            prev_itemlist = sc.itemlist
        outputcsv.append(output)

    tmpdic = {'召喚数': num_summon }
    std_item_dic.update(dict(Counter(wholelist)))
    csvfieldnames.update(std_item_dic)
    csvfieldnames.update(tmpdic)

    return csvfieldnames, outputcsv

if __name__ == '__main__':
    ## オプションの解析
    parser = argparse.ArgumentParser(description='FGO召喚スクショを数えをCSV出力する')
    # 3. parser.add_argumentで受け取る引数を追加していく
    parser.add_argument('filenames', help='入力ファイル', nargs='*')    # 必須の引数を追加
    parser.add_argument('-m', '--mode', help='召喚モード', choices=['10', '11'], default='10')
    parser.add_argument('-f', '--folder', help='フォルダで指定')
    parser.add_argument('-d', '--debug', help='デバッグ情報の出力', action='store_true')
    parser.add_argument('--version', action='version', version=progname + " " + version)

    args = parser.parse_args()    # 引数を解析

    if not Item_dir.is_dir():
        Item_dir.mkdir()
    if not Servant_dir.is_dir():
        Servant_dir.mkdir()
    if not CE_dir.is_dir():
        CE_dir.mkdir()

    if args.folder:
        inputs = [x for x in Path(args.folder).iterdir()]
    else:
        inputs = args.filenames
    
    csvfieldnames, outputcsv = get_output(inputs, args.mode, args.debug)

    fnames = csvfieldnames.keys()
    writer = csv.DictWriter(sys.stdout, fieldnames=fnames, lineterminator='\n')
    writer.writeheader()
    if len(outputcsv) > 1: #ファイル一つのときは合計値は出さない
        writer.writerow(csvfieldnames)
    for o in outputcsv:
        writer.writerow(o)

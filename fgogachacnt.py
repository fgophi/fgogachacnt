#!/usr/bin/env python3
#
# Fate/Grand Order のガチャ結果画面のスクショのカードを数え上げます
#

import cv2
import numpy as np
import argparse
from pathlib import Path
from collections import Counter
import csv
import sys

progname = "FGOガチャカウント"
version = "0.0.2"

Item_dir = Path(__file__).resolve().parent / Path("item/")
Servant_dir = Path(__file__).resolve().parent / Path("item/servant/")
CE_dir = Path(__file__).resolve().parent / Path("item/ce/")
CCode_dir = Path(__file__).resolve().parent / Path("item/ccode/")
train_card = Path(__file__).resolve().parent / Path("card.xml") # カード下部認識用
train_rarity = Path(__file__).resolve().parent / Path("rarity.xml") # カード下部認識用
Servant_dist_file = Path(__file__).resolve().parent / Path("hash_srv.csv")
CE_dist_file = Path(__file__).resolve().parent / Path("hash_ce.csv")
CE_center_dist_file = Path(__file__).resolve().parent / Path("hash_ce_center.csv")
CCode_dist_file = Path(__file__).resolve().parent / Path("hash_ccode.csv")
FP_34Servant_wl = Path(__file__).resolve().parent / Path("fp_34srv_wl.txt")
FP_12CE_bl = Path(__file__).resolve().parent / Path("fp_12ce_bl.txt")
FP_3CE_wl = Path(__file__).resolve().parent / Path("fp_3ce_wl.txt")
hasher = cv2.img_hash.PHash_create()

#アイテム認識用
##servant_0star = ['アンリマユ',]
##servant_1star = ['アーラシュ', 'アマデウス', '小次郎', 'マタ・ハリ', 'スパルタクス',
##            'アステリオス', 'イアソン', 'バーソロミュー', 'コルデー',]
##servant_2star = ['弁慶', 'レオニダス', 'ゲオルギウス', 'ティーチ', 'アンデルセン',
##            'シェイクスピア', '呪腕', 'サンソン', 'ファントム', 'カリギュラ',
##            'エイリーク', 'パリス', 'ガレス', '陳宮', 'サロメ',]
##servant_3star = ['カエサル', '剣ジル', 'ロビンフッド', 'エウリュアレ', 'クー・フーリン',
##            'プニキ', 'ロムルス', 'メドゥーサ', 'ブーディカ', '牛若丸', 'アレキサンダー',
##            'メディア', 'メフィストフェレス', '荊軻', '呂布', 'ダレイオス', '清姫',
##            'ダビデ', 'ヘクトール', 'ディルムッド', 'フェルグス', 'パラケルスス', 'バベッジ',
##            'ジキル', '子ギル', 'ジェロニモ', 'ビリー', '百貌', '小太郎', '静謐', '俵',
##            '胤舜', 'アヴィケブロン', 'ウィリアム・テル', 'マンドリカルド',]
##servant_4star = ['リリィ']         
exp_1star = ['全種火', '剣種火', '槍種火', '弓種火',
             '騎種火', '術種火','殺種火','狂種火',]          
exp_2star = ['全灯火', '剣灯火', '槍灯火', '弓灯火',
             '騎灯火', '術灯火','殺灯火','狂灯火',]
exp_3star = ['全大火', '剣大火', '槍大火', '弓大火',
             '騎大火', '術大火','殺大火','狂大火',]
exp_4star = ['全猛火', '剣猛火', '槍猛火', '弓猛火',
             '騎猛火', '術猛火','殺猛火','狂猛火',]
exp_5star = ['全業火', '剣業火', '槍業火', '弓業火',
             '騎業火', '術業火','殺業火','狂業火',]
status_1star = ['全★1ATK', '剣★1ATK', '槍★1ATK', '弓★1ATK',
                '騎★1ATK', '術★1ATK','殺★1ATK','狂★1ATK',
                '全★1HP', '剣★1HP', '槍★1HP', '弓★1HP',
                '騎★1HP', '術★1HP','殺★1HP','狂★1HP',]
status_2star = ['全★2ATK', '剣★2ATK', '槍★2ATK', '弓★2ATK',
                '騎★2ATK', '術★2ATK','殺★2ATK','狂★2ATK',
                '全★2HP', '剣★2HP', '槍★2HP', '弓★2HP',
                '騎★2HP', '術★2HP','殺★2HP','狂★2HP',]
status_3star = ['全★3ATK', '剣★3ATK', '槍★3ATK', '弓★3ATK',
                '騎★3ATK', '術★3ATK','殺★3ATK','狂★3ATK',
                '全★3HP', '剣★3HP', '槍★3HP', '弓★3HP',
                '騎★3HP', '術★3HP','殺★3HP','狂★3HP',]
##ce_1star = ['闘争', '連鎖', '断絶', '覚醒', '飢餓',]
##ce_2star = ['慈愛', '繁栄', '欺瞞', '同調', '暗澹',]
##ce_3star = ['アゾット剣', '偽臣の書', '青の黒鍵', '緑の黒鍵', '赤の黒鍵',
##            '凛のペンダント', '魔道書', '龍脈', '魔術鉱石', '竜種', '葦の海',
##            'ムーンセル', 'ルーンストーン', 'そして船は征く', '魔猪', '時計塔',
##            '魔力計', 'シュトルヒリッター', '阿蘭若', 'モータード・キュイラッシェ',
##            'ライオンのぬいぐるみ', 'ルーの光輪', '波濤の獣',
##            'セルフ・ギアス・スクロール', '過ぎ去りし夢', 'ミラクル求道者',
##            'フリーランサー', '叡智の光', '深窓の麗人',]
##ce_3star_stone = ['まるごしシンジ君', 'アトゴウラ', 'アトラス院', 'カムランの戦い',
##                  'デイ・アフター', 'ノーブル・ピース', 'ヒュドラ・ダガー',
##                  'フラガラック', 'ブロンズリンク・マニュピレーター',
##                  '固有結界', '天の逆月', '宝石剣ゼルレッチ', '幻想種', '愛の霊薬',
##                  '柳洞寺', '桜の特製弁当', '激辛麻婆豆腐', '瓦礫の聖堂', '神造兵器',
##                  '若返りの霊薬', '謎の仮面群', '魂食い', '黄金樹の系譜']
####ce_4star_stone = ['アルゴノーツ', 'ガンド', 'コードキャスト', 'スイーパー', 'マグダラの聖骸布',
##            'ラ・フォリア', 'リズムド･バース', 'ルームガーダー', 'レコードフォルダー',
##            '一の太刀', '優雅たれ', '千年黄金樹', '原始呪術', '天の晩餐', '天使の詩',
##            '宝石魔術・対影', '封印指定執行者', '彼方の先には', '恋知らぬ令嬢',
##            '投影魔術', '援護射撃', '最後の語り部', '柔らかな慈愛', '死の芸術',
##            '死霊魔術', '毒蛇一芸', '目覚めた意思', '緑の破音', '虚数魔術',
##            '野望の嚆矢', '鋼の鍛錬', '騎士の矜持']
##ce_5star_stone = ['もう一つの結末', 'アトラスの嬰児', 'イマジナリー・アラウンド',
##                  'ウィッチクラフト', 'カレイドスコープ', 'フォーマルクラフト',
##                  'リミテッド／ゼロオーバー', '五百年の妄執', '救済を願いし者',
##                  '月の勝利者', '火炎伯爵', '理想の王聖', '目醒め前', '聖者の依代',
##                  '起源弾', '陽だまりの中で', '魔性菩薩', '黄昏の王聖', '黒聖杯']
kalesco = ['カレイドスコープ']
##ccode_1star = [ 'コード：モータル', 'コード：ブルート', 'コード：コープス',
##            'コード：イービル', 'コード：ニンバス',]
##ccode_2star = ['コード：ブレス', 'コード：グリッター', 'コード：バースト',           
##            'コード：フォーカス', 'コード：キュア―',]

std_item = []
##std_item = servant_0star + servant_1star + servant_2star \
##           + servant_3star + servant_4star \
##           + exp_1star + exp_2star + exp_3star + exp_4star + exp_5star \
##           + status_1star + status_2star + status_3star \
##           + ce_1star + ce_2star + ce_3star \
##           + ccode_1star + ccode_2star

std_item_stone = kalesco

dist_local_servant = {
}

dist_local_ce = {
}
dist_local_ce_center = {
}

dist_servant = {
##    'アンリマユ':np.array([[86, 15, 11, 14, 15, 20, 17, 202]], dtype='uint8'),
##    'リリィ':np.array([[43, 106, 218, 241, 225, 245, 40, 118]], dtype='uint8'),
##    'アステリオス':np.array([[157, 188, 38, 55, 218, 217, 109, 51]], dtype='uint8'),
##    'アマデウス':np.array([[209, 149, 96, 224, 148, 211, 223, 14]], dtype='uint8'),
##    'アーラシュ':np.array([[23, 86, 108, 108, 185, 225, 195, 19]], dtype='uint8'),
##    'イアソン':np.array([[163, 241, 232, 233, 241, 241, 185, 93]], dtype='uint8'),
##    'コルデー':np.array([[219, 122, 194, 204, 149, 219, 172, 165]], dtype='uint8'),
##    'スパルタクス':np.array([[183, 181, 106, 102, 137, 113, 94, 47]], dtype='uint8'),
##    'バーソロミュー':np.array([[212, 21, 38, 46, 11, 250, 111, 152]], dtype='uint8'),
##    'マタ・ハリ':np.array([[115, 120, 172, 167, 30, 241, 224, 23]], dtype='uint8'),
##    '小次郎':np.array([[145, 181, 164, 140, 204, 149, 76, 142]], dtype='uint8'),
##    'アンデルセン':np.array([[249, 121, 166, 198, 91, 57, 229, 166]], dtype='uint8'),
##    'エイリーク':np.array([[217, 218, 7, 37, 114, 27, 101, 103]], dtype='uint8'),
##    'カリギュラ':np.array([[87, 214, 168, 108, 198, 241, 15, 163]], dtype='uint8'),
##    'ガレス':np.array([[243, 241, 216, 102, 177, 217, 100, 55]], dtype='uint8'),
##    'ゲオルギウス':np.array([[95, 58, 164, 228, 38, 15, 217, 115]], dtype='uint8'),
##    'サロメ':np.array([[25, 218, 6, 44, 100, 51, 109, 182]], dtype='uint8'),
##    'サンソン':np.array([[113, 233, 237, 46, 11, 209, 115, 164]], dtype='uint8'),
##    'シェイクスピア':np.array([[91, 248, 172, 39, 188, 159, 115, 150]], dtype='uint8'),
##    'ティーチ':np.array([[91, 152, 25, 6, 152, 185, 198, 59]], dtype='uint8'),
##    'パリス':np.array([[179, 248, 234, 165, 248, 91, 100, 158]], dtype='uint8'),
##    'ファントム':np.array([[219, 155, 60, 60, 131, 207, 115, 108]], dtype='uint8'),
##    'レオニダス':np.array([[90, 26, 27, 240, 184, 113, 228, 15]], dtype='uint8'),
##    '呪腕':np.array([[120, 91, 39, 134, 155, 121, 71, 180]], dtype='uint8'),
##    '弁慶':np.array([[31, 17, 224, 228, 25, 57, 193, 46]], dtype='uint8'),
##    '陳宮':np.array([[83, 88, 161, 166, 16, 179, 204, 39]], dtype='uint8'),
##    'アレキサンダー':np.array([[243, 18, 7, 12, 27, 105, 29, 140]], dtype='uint8'),
##    'アヴィケブロン':np.array([[119, 82, 155, 30, 7, 60, 249, 216]], dtype='uint8'),
##    'ウィリアム・テル':np.array([[92, 67, 129, 222, 11, 12, 86, 124]], dtype='uint8'),
##    'エウリュアレ':np.array([[241, 120, 134, 230, 121, 210, 45, 236]], dtype='uint8'),
##    'カエサル':np.array([[83, 87, 132, 244, 179, 32, 14, 60]], dtype='uint8'),
##    'クー・フーリン':np.array([[244, 209, 78, 62, 176, 154, 71, 100]], dtype='uint8'),
##    'ジェロニモ':np.array([[126, 18, 7, 4, 131, 220, 199, 168]], dtype='uint8'),
##    'ジキル':np.array([[243, 89, 13, 102, 176, 219, 209, 236]], dtype='uint8'),
##    'ダビデ':np.array([[215, 248, 104, 228, 160, 91, 45, 30]], dtype='uint8'),
##    'ダレイオス':np.array([[134, 135, 120, 92, 39, 96, 87, 142]], dtype='uint8'),
##    'ディルムッド':np.array([[30, 146, 252, 60, 193, 108, 141, 42]], dtype='uint8'),
##    'バベッジ':np.array([[245, 22, 13, 94, 3, 110, 19, 144]], dtype='uint8'),
##    'パラケルスス':np.array([[149, 28, 96, 228, 39, 83, 13, 118]], dtype='uint8'),
##    'ビリー':np.array([[246, 211, 240, 180, 161, 240, 27, 45]], dtype='uint8'),
##    'フェルグス':np.array([[157, 156, 178, 180, 160, 147, 252, 238]], dtype='uint8'),
##    'ブーディカ':np.array([[25, 154, 143, 158, 254, 67, 108, 38]], dtype='uint8'),
##    'プニキ':np.array([[215, 220, 172, 182, 154, 78, 113, 140]], dtype='uint8'),
##    'ヘクトール':np.array([[212, 212, 15, 30, 19, 161, 179, 100]], dtype='uint8'),
##    'マンドリカルド':np.array([[91, 24, 132, 70, 0, 71, 205, 252]], dtype='uint8'),
##    'メディア':np.array([[80, 50, 39, 78, 19, 121, 67, 166]], dtype='uint8'),
##    'メドゥーサ':np.array([[211, 215, 160, 160, 25, 121, 102, 134]], dtype='uint8'),
##    'メフィストフェレス':np.array([[217, 154, 110, 94, 23, 177, 227, 107]], dtype='uint8'),
##    'ロビンフッド':np.array([[116, 86, 5, 20, 19, 244, 195, 140]], dtype='uint8'),
##    'ロムルス':np.array([[148, 157, 105, 224, 163, 24, 67, 36]], dtype='uint8'),
##    '俵':np.array([[249, 90, 131, 164, 15, 82, 117, 176]], dtype='uint8'),
##    '剣ジル':np.array([[153, 156, 232, 99, 6, 210, 252, 166]], dtype='uint8'),
##    '呂布':np.array([[94, 18, 3, 14, 15, 22, 27, 33]], dtype='uint8'),
##    '子ギル':np.array([[241, 219, 104, 176, 139, 120, 179, 132]], dtype='uint8'),
##    '小太郎':np.array([[52, 188, 78, 79, 43, 179, 140, 70]], dtype='uint8'),
##    '清姫':np.array([[19, 225, 32, 23, 137, 115, 92, 44]], dtype='uint8'),
##    '牛若丸':np.array([[113, 114, 103, 140, 139, 209, 140, 220]], dtype='uint8'),
##    '百貌':np.array([[86, 22, 11, 6, 3, 116, 83, 232]], dtype='uint8'),
##    '胤舜':np.array([[89, 232, 206, 241, 163, 23, 241, 152]], dtype='uint8'),
##    '荊軻':np.array([[83, 92, 47, 38, 180, 139, 200, 183]], dtype='uint8'),
##    '静謐':np.array([[120, 51, 173, 140, 131, 248, 3, 228]], dtype='uint8'),
}
dist_ce = {
##    '断絶':np.array([[226, 19, 153, 131, 67, 205, 74, 116]], dtype='uint8'),
##    '覚醒':np.array([[171, 47, 180, 123, 15, 188, 127, 164]], dtype='uint8'),
##    '連鎖':np.array([[161, 169, 26, 169, 126, 215, 252, 235]], dtype='uint8'),
##    '闘争':np.array([[53, 17, 16, 246, 207, 206, 203, 108]], dtype='uint8'),
##    '飢餓':np.array([[114, 86, 140, 176, 3, 152, 115, 230]], dtype='uint8'),
##    '同調':np.array([[48, 185, 140, 200, 99, 52, 115, 112]], dtype='uint8'),
##    '慈愛':np.array([[246, 22, 137, 67, 23, 249, 1, 245]], dtype='uint8'),
##    '暗澹':np.array([[244, 70, 161, 48, 3, 172, 95, 236]], dtype='uint8'),
##    '欺瞞':np.array([[249, 218, 188, 218, 79, 164, 211, 60]], dtype='uint8'),
##    '繁栄':np.array([[245, 220, 146, 208, 30, 181, 89, 124]], dtype='uint8'),
##    'そして船は征く':np.array([[125, 195, 194, 124, 40, 94, 147, 118]], dtype='uint8'),
##    'アゾット剣':np.array([[220, 102, 137, 152, 39, 204, 23, 108]], dtype='uint8'),
##    'シュトルヒリッター':np.array([[153, 200, 72, 30, 147, 115, 151, 224]], dtype='uint8'),
##    'セルフ・ギアス・スクロール':np.array([[223, 195, 140, 252, 131, 46, 211, 22]], dtype='uint8'),
##    'フリーランサー':np.array([[76, 120, 11, 229, 49, 14, 27, 38]], dtype='uint8'),
##    'ミラクル求道者':np.array([[124, 140, 171, 227, 137, 48, 3, 115]], dtype='uint8'),
##    'ムーンセル':np.array([[25, 137, 195, 242, 43, 51, 208, 131]], dtype='uint8'),
##    'モータード・キュイラッシェ':np.array([[221, 24, 97, 148, 155, 236, 140, 230]], dtype='uint8'),
##    'ライオンのぬいぐるみ':np.array([[135, 177, 56, 203, 41, 119, 249, 206]], dtype='uint8'),
##    'ルーの光輪':np.array([[107, 248, 158, 70, 99, 54, 147, 30]], dtype='uint8'),
##    'ルーンストーン':np.array([[253, 173, 15, 48, 161, 228, 147, 156]], dtype='uint8'),
##    '偽臣の書':np.array([[211, 134, 172, 115, 44, 252, 108, 7]], dtype='uint8'),
##    '凛のペンダント':np.array([[115, 210, 189, 124, 12, 134, 151, 248]], dtype='uint8'),
##    '叡智の光':np.array([[125, 90, 22, 36, 143, 210, 246, 228]], dtype='uint8'),
##    '時計塔':np.array([[94, 195, 97, 88, 27, 158, 151, 60]], dtype='uint8'),
##    '波濤の獣':np.array([[213, 194, 163, 252, 62, 252, 252, 156]], dtype='uint8'),
##    '深窓の麗人':np.array([[211, 248, 38, 199, 140, 62, 31, 113]], dtype='uint8'),
##    '竜種':np.array([[15, 230, 242, 219, 104, 114, 28, 10]], dtype='uint8'),
##    '緑の黒鍵':np.array([[249, 249, 169, 28, 11, 108, 19, 244]], dtype='uint8'),
##    '葦の海':np.array([[217, 209, 14, 110, 187, 188, 85, 202]], dtype='uint8'),
##    '赤の黒鍵':np.array([[219, 94, 57, 122, 142, 240, 127, 10]], dtype='uint8'),
##    '過ぎ去りし夢':np.array([[215, 46, 46, 240, 147, 150, 50, 210]], dtype='uint8'),
##    '阿蘭若':np.array([[82, 66, 249, 156, 169, 241, 179, 54]], dtype='uint8'),
##    '青の黒鍵':np.array([[94, 66, 143, 92, 11, 60, 83, 140]], dtype='uint8'),
##    '魔力計':np.array([[114, 210, 12, 230, 131, 120, 91, 38]], dtype='uint8'),
##    '魔猪':np.array([[253, 218, 11, 36, 147, 86, 110, 44]], dtype='uint8'),
##    '魔術鉱石':np.array([[219, 216, 184, 186, 166, 244, 211, 230]], dtype='uint8'),
##    '魔道書':np.array([[189, 208, 233, 108, 19, 216, 91, 26]], dtype='uint8'),
##    '龍脈':np.array([[115, 90, 140, 228, 156, 70, 244, 10]], dtype='uint8'),
    }
dist_ce_center = {
##    '断絶':np.array([[47, 194, 242, 16, 186, 126, 244, 47]], dtype='uint8'),
##    '覚醒':np.array([[131, 2, 203, 43, 76, 124, 62, 243]], dtype='uint8'),
##    '連鎖':np.array([[156, 17, 141, 97, 198, 37, 142, 255]], dtype='uint8'),
##    '闘争':np.array([[113, 165, 38, 67, 26, 230, 199, 185]], dtype='uint8'),
##    '飢餓':np.array([[227, 60, 214, 219, 237, 103, 51, 158]], dtype='uint8'),
##    '同調':np.array([[3, 241, 89, 141, 204, 110, 109, 239]], dtype='uint8'),
##    '慈愛':np.array([[78, 253, 203, 207, 202, 176, 209, 17]], dtype='uint8'),
##    '暗澹':np.array([[197, 60, 211, 60, 211, 44, 131, 4]], dtype='uint8'),
##    '欺瞞':np.array([[46, 99, 5, 222, 15, 168, 242, 72]], dtype='uint8'),
##    '繁栄':np.array([[13, 207, 66, 250, 42, 114, 213, 209]], dtype='uint8'),
##    'そして船は征く':np.array([[4, 43, 176, 7, 232, 139, 64, 2]], dtype='uint8'),
##    'アゾット剣':np.array([[86, 156, 153, 250, 195, 17, 120, 130]], dtype='uint8'),
##    'シュトルヒリッター':np.array([[29, 180, 124, 236, 220, 236, 200, 201]], dtype='uint8'),
##    'セルフ・ギアス・スクロール':np.array([[235, 181, 224, 233, 152, 228, 29, 113]], dtype='uint8'),
##    'フリーランサー':np.array([[156, 177, 7, 117, 194, 150, 165, 137]], dtype='uint8'),
##    'ミラクル求道者':np.array([[69, 134, 207, 113, 188, 75, 51, 207]], dtype='uint8'),
##    'ムーンセル':np.array([[177, 188, 14, 89, 252, 203, 243, 242]], dtype='uint8'),
##    'モータード・キュイラッシェ':np.array([[137, 22, 55, 249, 232, 254, 238, 228]], dtype='uint8'),
##    'ライオンのぬいぐるみ':np.array([[91, 128, 180, 95, 193, 196, 59, 48]], dtype='uint8'),
##    'ルーの光輪':np.array([[87, 240, 184, 188, 61, 191, 158, 158]], dtype='uint8'),
##    'ルーンストーン':np.array([[25, 200, 117, 39, 206, 148, 171, 23]], dtype='uint8'),
##    '偽臣の書':np.array([[139, 204, 211, 33, 60, 14, 228, 158]], dtype='uint8'),
##    '凛のペンダント':np.array([[194, 131, 145, 169, 18, 180, 72, 38]], dtype='uint8'),
##    '叡智の光':np.array([[41, 207, 156, 243, 230, 103, 188, 105]], dtype='uint8'),
##    '時計塔':np.array([[244, 86, 21, 13, 6, 0, 2, 0]], dtype='uint8'),
##    '波濤の獣':np.array([[108, 151, 22, 23, 131, 140, 212, 66]], dtype='uint8'),
##    '深窓の麗人':np.array([[11, 227, 205, 60, 247, 138, 30, 112]], dtype='uint8'),
##    '竜種':np.array([[21, 90, 75, 239, 123, 70, 33, 152]], dtype='uint8'),
##    '緑の黒鍵':np.array([[34, 251, 73, 33, 45, 0, 8, 132]], dtype='uint8'),
##    '葦の海':np.array([[73, 133, 117, 90, 241, 194, 13, 127]], dtype='uint8'),
##    '赤の黒鍵':np.array([[233, 38, 208, 120, 63, 14, 8, 238]], dtype='uint8'),
##    '過ぎ去りし夢':np.array([[227, 150, 77, 252, 80, 71, 191, 235]], dtype='uint8'),
##    '阿蘭若':np.array([[158, 99, 112, 133, 0, 188, 137, 210]], dtype='uint8'),
##    '青の黒鍵':np.array([[166, 175, 184, 225, 197, 2, 5, 128]], dtype='uint8'),
##    '魔力計':np.array([[139, 212, 94, 212, 254, 173, 75, 65]], dtype='uint8'),
##    '魔猪':np.array([[84, 85, 75, 171, 173, 205, 45, 169]], dtype='uint8'),
##    '魔術鉱石':np.array([[13, 49, 192, 7, 238, 114, 87, 23]], dtype='uint8'),
##    '魔道書':np.array([[3, 185, 246, 79, 238, 246, 85, 118]], dtype='uint8'),
##    '龍脈':np.array([[14, 179, 1, 12, 9, 64, 25, 64]], dtype='uint8'),
    }
dist_ccode = {
##    'コード：イービル':np.array([[91, 95, 166, 243, 120, 126, 154, 30]], dtype='uint8'),
##    'コード：キュア―':np.array([[182, 35, 187, 220, 12, 67, 3, 20]], dtype='uint8'),
##    'コード：グリッター':np.array([[25, 215, 106, 218, 62, 250, 12, 250]], dtype='uint8'),
##    'コード：コープス':np.array([[175, 62, 66, 15, 251, 203, 62, 30]], dtype='uint8'),
##    'コード：ニンバス':np.array([[251, 95, 74, 95, 235, 95, 191, 95]], dtype='uint8'),
##    'コード：バースト':np.array([[51, 60, 190, 251, 175, 255, 106, 191]], dtype='uint8'),
##    'コード：フォーカス':np.array([[185, 239, 234, 253, 235, 255, 255, 251]], dtype='uint8'),
##    'コード：ブルート':np.array([[199, 54, 171, 227, 120, 155, 54, 220]], dtype='uint8'),
##    'コード：ブレス':np.array([[163, 199, 26, 172, 188, 62, 62, 173]], dtype='uint8'),
##    'コード：モータル':np.array([[47, 28, 194, 107, 248, 211, 9, 246]], dtype='uint8'),
    }
dist_exp = {
    '全種火':np.array([[133, 228, 89, 249, 154, 156, 190, 166]], dtype='uint8'),
    '剣種火':np.array([[161, 102, 249, 243, 182, 190, 186, 38]], dtype='uint8'),
    '弓種火':np.array([[161, 102, 249, 243, 182, 190, 186, 38]], dtype='uint8'),
    '槍種火':np.array([[161, 102, 249, 243, 182, 190, 186, 38]], dtype='uint8'),
    '殺種火':np.array([[161, 102, 249, 243, 190, 190, 186, 38]], dtype='uint8'),
    '騎種火':np.array([[161, 102, 249, 243, 182, 190, 186, 38]], dtype='uint8'),
    '術種火':np.array([[171, 102, 249, 243, 190, 190, 250, 38]], dtype='uint8'),
    '狂種火':np.array([[161, 102, 121, 243, 158, 190, 186, 38]], dtype='uint8'),
    '全灯火':np.array([[133, 132, 234, 99, 115, 190, 222 ,123]], dtype='uint8'),
    '剣灯火':np.array([[153, 228, 222, 123, 245, 190, 220, 123]], dtype='uint8'),
    '弓灯火':np.array([[153, 228, 222, 123, 245, 190, 220, 123]], dtype='uint8'),
    '槍灯火':np.array([[153, 228, 222, 123, 117, 190, 222, 59]], dtype='uint8'),
    '騎灯火':np.array([[201, 228, 222, 123, 117, 190, 222, 59]], dtype='uint8'),
    '術灯火':np.array([[153, 228, 222, 123, 245, 190, 220, 123]], dtype='uint8'),
    '殺灯火':np.array([[153, 228, 222, 123, 245, 190, 220, 123]], dtype='uint8'),
    '狂灯火':np.array([[153, 228, 222, 115, 245, 190, 156, 123]], dtype='uint8'),
    '全大火':np.array([[103, 100, 224, 75, 217, 158, 54, 233]], dtype='uint8'),
    '剣大火':np.array([[51, 37, 122, 105, 205, 158, 162, 65]], dtype='uint8'),
    '弓大火':np.array([[51, 37, 122, 233, 205, 158, 162, 65]], dtype='uint8'),
    '槍大火':np.array([[51, 37, 122, 233, 205, 158, 162, 65]], dtype='uint8'),
    '殺大火':np.array([[51, 37, 122, 233, 205, 158, 162, 65]], dtype='uint8'),
    '狂大火':np.array([[115, 37, 122, 233, 205, 158, 162, 65]], dtype='uint8'),
    '術大火':np.array([[51, 37, 122, 233, 205, 158, 162, 65]], dtype='uint8'),
    '騎大火':np.array([[51, 37, 122, 109, 205, 158, 162, 65]], dtype='uint8'),
    '全猛火':np.array([[57, 100, 230, 88, 141, 171, 156, 175]], dtype='uint8'),
    '剣猛火':np.array([[59, 36, 166, 90, 141, 171, 28, 161]], dtype='uint8'),
    '弓猛火':np.array([[115, 36, 166, 90, 157, 171, 60, 161]], dtype='uint8'),
    '槍猛火':np.array([[115, 36, 166, 90, 157, 171, 60, 161]], dtype='uint8'),
    '殺猛火':np.array([[59, 36, 166, 90, 157, 171, 28, 165]], dtype='uint8'),
    '狂猛火':np.array([[115, 36, 38, 90, 157, 171, 52, 165]], dtype='uint8'),
    '術猛火':np.array([[59, 36, 166, 90, 157, 171, 28, 161]], dtype='uint8'),
    '騎猛火':np.array([[59, 36, 166, 90, 157, 171, 28, 161]], dtype='uint8'),    
    '全業火':np.array([[35, 102, 34, 106, 90, 239, 126, 186]], dtype='uint8'),
    '剣業火':np.array([[163, 102, 34, 106, 90, 235, 126, 186]], dtype='uint8'),
    '弓業火':np.array([[163, 102, 34, 106, 90, 235, 126, 186]], dtype='uint8'),
    '槍業火':np.array([[163, 102, 34, 106, 90, 235, 126, 186]], dtype='uint8'),
    '殺業火':np.array([[163, 102, 162, 106, 90, 239, 126, 186]], dtype='uint8'),
    '狂業火':np.array([[163, 102, 34, 106, 90, 239, 126, 186]], dtype='uint8'),
    '術業火':np.array([[163, 102, 34, 106, 90, 235, 126, 186]], dtype='uint8'),
    '騎業火':np.array([[163, 102, 34, 106, 90, 239, 126, 186]], dtype='uint8'),
    '全種火変換':np.array([[133, 228, 91, 249, 146, 156, 30, 38]], dtype='uint8'),
    '剣種火変換':np.array([[171, 102, 249, 243, 158, 190, 234, 38]], dtype='uint8'),
    '弓種火変換':np.array([[169, 102, 249, 243, 158, 190, 186, 38]], dtype='uint8'),
    '槍種火変換':np.array([[169, 102, 249, 243, 158, 190, 186, 38]], dtype='uint8'),
    '殺種火変換':np.array([[171, 102, 249, 243, 158, 190, 250, 38]], dtype='uint8'),
    '狂種火変換':np.array([[161, 102, 89, 251, 158, 190, 170, 38]], dtype='uint8'),
    '術種火変換':np.array([[169, 102, 249, 243, 158, 190, 186, 38]], dtype='uint8'),
    '騎種火変換':np.array([[169, 102, 249, 243, 158, 190, 186, 38]], dtype='uint8'),
    '全灯火変換':np.array([[133, 132, 235, 99, 83, 190, 222, 123]], dtype='uint8'),
    '剣灯火変換':np.array([[153, 228, 222, 123, 117, 190, 222, 123]], dtype='uint8'),
    '弓灯火変換':np.array([[201, 228, 222, 123, 117, 191, 222, 59]], dtype='uint8'),
    '槍灯火変換':np.array([[201, 228, 222, 123, 117, 190, 222, 59]], dtype='uint8'),
    '殺灯火変換':np.array([[153, 228, 222, 115, 245, 190, 156, 123]], dtype='uint8'),
    '狂灯火変換':np.array([[153, 228, 222, 123, 245, 190, 156, 123]], dtype='uint8'),
    '術灯火変換':np.array([[153, 228, 222, 123, 117, 190, 222, 123]], dtype='uint8'),
    '騎灯火変換':np.array([[201, 228, 222, 123, 117, 191, 222, 59]], dtype='uint8'),
    '全大火変換':np.array([[103, 100, 225, 75, 217, 158, 55, 233]], dtype='uint8'),
    '剣大火変換':np.array([[51, 37, 122, 105, 205, 158, 162, 65]], dtype='uint8'),
    '弓大火変換':np.array([[115, 37, 122, 233, 205, 158, 162, 193]], dtype='uint8'),
    '槍大火変換':np.array([[51, 37, 122, 233, 205, 158, 162, 65]], dtype='uint8'),
    '殺大火変換':np.array([[59, 37, 26, 105, 205, 222, 162, 65]], dtype='uint8'),
    '狂大火変換':np.array([[51, 37, 122, 233, 205, 158, 162, 65]], dtype='uint8'),
    '術大火変換':np.array([[59, 37, 26, 109, 205, 158, 162, 65]], dtype='uint8'),
    '騎大火変換':np.array([[51, 37, 122, 105, 205, 158, 162, 65]], dtype='uint8'),
    }
dist_tanebi_class = {
    '全種火':np.array([[217, 11, 58, 211, 14, 212, 208, 45]], dtype='uint8'),
    '剣種火':np.array([[48, 59, 13, 195, 210, 244, 129, 171]], dtype='uint8'),
    '弓種火':np.array([[197, 207, 57, 19, 91, 73, 130, 182]], dtype='uint8'),
    '槍種火':np.array([[197, 199, 79, 12, 152, 240, 100, 243]], dtype='uint8'),
    '殺種火':np.array([[209, 207, 12, 54, 211, 208, 179, 203]], dtype='uint8'),
    '狂種火':np.array([[17, 203, 204, 52, 30, 48, 51, 235]], dtype='uint8'),
    '術種火':np.array([[85, 91, 141, 134, 210, 88, 36, 102]], dtype='uint8'),
    '騎種火':np.array([[113, 155, 205, 76, 92, 198, 195, 227]], dtype='uint8'),
    '全灯火':np.array([[209, 11, 52, 147, 14, 212, 208, 45]], dtype='uint8'),
    '剣灯火':np.array([[49, 59, 15, 195, 208, 180, 197, 171]], dtype='uint8'),
    '弓灯火':np.array([[231, 207, 25, 18, 201, 25, 149, 182]], dtype='uint8'),
    '槍灯火':np.array([[228, 195, 75, 8, 152, 176, 101, 179]], dtype='uint8'),
    '殺灯火':np.array([[211, 203, 12, 50, 211, 210, 177, 203]], dtype='uint8'),
    '狂灯火':np.array([[51, 203, 204, 54, 180, 178, 49, 171]], dtype='uint8'),
    '術灯火':np.array([[125, 27, 139, 134, 243, 88, 36, 230]], dtype='uint8'),
    '騎灯火':np.array([[122, 155, 175, 110, 76, 198, 195, 161]], dtype='uint8'),
    '全大火':np.array([[193, 75, 48, 146, 28, 244, 210, 47]], dtype='uint8'),
    '剣大火':np.array([[49, 51, 73, 195, 219, 244, 203, 175]], dtype='uint8'),
    '弓大火':np.array([[197, 199, 25, 178, 217, 217, 178, 182]], dtype='uint8'),
    '槍大火':np.array([[197, 199, 75, 12, 152, 240, 100, 179]], dtype='uint8'),
    '殺大火':np.array([[209, 207, 12, 54, 211, 208, 179, 171]], dtype='uint8'),
    '狂大火':np.array([[1, 207, 204, 180, 188, 180, 51, 175]], dtype='uint8'),
    '術大火':np.array([[89, 27, 137, 198, 243, 248, 44, 166]], dtype='uint8'),
    '騎大火':np.array([[241, 147, 205, 100, 220, 214, 195, 167]], dtype='uint8'),
    '全猛火':np.array([[209, 75, 16, 210, 30, 212, 208, 47]], dtype='uint8'),
    '剣猛火':np.array([[49, 59, 45, 195, 219, 244, 211, 43]], dtype='uint8'),
    '弓猛火':np.array([[229, 203, 57, 50, 203, 89, 147, 182]], dtype='uint8'),
    '槍猛火':np.array([[193, 131, 77, 26, 152, 240, 229, 242]], dtype='uint8'),
    '殺猛火':np.array([[241, 203, 44, 50, 219, 244, 147, 195]], dtype='uint8'),
    '狂猛火':np.array([[49, 203, 204, 54, 190, 52, 51, 111]], dtype='uint8'),
    '術猛火':np.array([[117, 91, 141, 198, 210, 120, 6, 38]], dtype='uint8'),
    '騎猛火':np.array([[49, 155, 237, 102, 204, 212, 211, 35]], dtype='uint8'),
    '全業火':np.array([[197, 250, 169, 144, 94, 244, 210, 15]], dtype='uint8'),
    '剣業火':np.array([[49, 58, 13, 210, 219, 52, 210, 15]], dtype='uint8'),
    '弓業火':np.array([[197, 250, 137, 48, 219, 61, 146, 182]], dtype='uint8'),
    '槍業火':np.array([[133, 178, 77, 24, 218, 112, 244, 247]], dtype='uint8'),
    '殺業火':np.array([[209, 250, 12, 50, 219, 244, 211, 203]], dtype='uint8'),
    '狂業火':np.array([[1, 202, 204, 52, 222, 52, 51, 15]], dtype='uint8'),
    '術業火':np.array([[69, 186, 141, 134, 211, 120, 6, 102]], dtype='uint8'),
    '騎業火':np.array([[177, 186, 205, 100, 222, 212, 211, 103]], dtype='uint8'),
    '全種火変換':np.array([[84, 171, 186, 145, 30, 214, 209, 5]], dtype='uint8'),
    '剣種火変換':np.array([[117, 58, 14, 193, 210, 246, 139, 85]], dtype='uint8'),
    '弓種火変換':np.array([[68, 174, 58, 17, 95, 90, 129, 150]], dtype='uint8'),
    '槍種火変換':np.array([[84, 175, 78, 13, 24, 242, 225, 213]], dtype='uint8'),
    '殺種火変換':np.array([[80, 138, 44, 37, 211, 210, 163, 209]], dtype='uint8'),
    '狂種火変換':np.array([[81, 203, 206, 52, 30, 50, 49, 7]], dtype='uint8'),
    '術種火変換':np.array([[84, 187, 142, 135, 210, 88, 45, 102]], dtype='uint8'),
    '騎種火変換':np.array([[80, 187, 142, 109, 92, 198, 131, 197]], dtype='uint8'),
    '全灯火変換':np.array([[85, 171, 190, 145, 14, 214, 209, 5]], dtype='uint8'),
    '剣灯火変換':np.array([[48, 58, 46, 203, 210, 214, 133, 5]], dtype='uint8'),
    '弓灯火変換':np.array([[100, 174, 58, 27, 77, 74, 129, 148]], dtype='uint8'),
    '槍灯火変換':np.array([[213, 131, 110, 9, 24, 242, 101, 147]], dtype='uint8'),
    '殺灯火変換':np.array([[81, 138, 46, 53, 211, 210, 177, 213]], dtype='uint8'),
    '狂灯火変換':np.array([[81, 139, 206, 116, 52, 50, 49, 85]], dtype='uint8'),
    '術灯火変換':np.array([[92, 59, 142, 199, 210, 90, 37, 38]], dtype='uint8'),
    '騎灯火変換':np.array([[80, 155, 46, 111, 76, 214, 129, 1]], dtype='uint8'),
    '全大火変換':np.array([[85, 171, 184, 147, 92, 214, 211, 47]], dtype='uint8'),
    '剣大火変換':np.array([[48, 58, 75, 195, 219, 246, 137, 39]], dtype='uint8'),
    '弓大火変換':np.array([[196, 174, 25, 49, 217, 216, 163, 182]], dtype='uint8'),
    '槍大火変換':np.array([[196, 166, 75, 13, 152, 240, 225, 183]], dtype='uint8'),
    '殺大火変換':np.array([[208, 206, 12, 52, 91, 210, 145, 131]], dtype='uint8'),
    '狂大火変換':np.array([[81, 203, 204, 180, 188, 182, 51, 55]], dtype='uint8'),
    '術大火変換':np.array([[93, 27, 139, 198, 243, 120, 37, 38]], dtype='uint8'),
    '騎大火変換':np.array([[81, 187, 206, 100, 220, 214, 131, 167]], dtype='uint8'),
    }
dist_status = {
    '全★1ATK':np.array([[43, 30, 54, 251, 107, 206, 180, 123]], dtype='uint8'),
    '剣★1ATK':np.array([[161, 62, 54, 251, 105, 206, 172, 123]], dtype='uint8'),
    '弓★1ATK':np.array([[161, 62, 54, 251, 105, 206, 172, 123]], dtype='uint8'),
    '槍★1ATK':np.array([[161, 62, 54, 251, 105, 206, 172, 123]], dtype='uint8'),
    '殺★1ATK':np.array([[169, 62, 54, 251, 105, 206, 188, 107]], dtype='uint8'),
    '狂★1ATK':np.array([[33, 62, 38, 243, 105, 206, 172, 123]], dtype='uint8'),
    '術★1ATK':np.array([[33, 62, 38, 243, 105, 206, 172, 123]], dtype='uint8'),
    '騎★1ATK':np.array([[161, 62, 54, 251, 105, 206, 172, 123]], dtype='uint8'),
    '全★2ATK':np.array([[3, 62, 54, 251, 107, 206, 167, 121]], dtype='uint8'),
    '剣★2ATK':np.array([[43, 62, 54, 243, 225, 206, 172, 123]], dtype='uint8'),
    '弓★2ATK':np.array([[43, 62, 54, 243, 225, 206, 174, 123]], dtype='uint8'),
    '槍★2ATK':np.array([[43, 62, 54, 243, 225, 206, 166, 123]], dtype='uint8'),
    '殺★2ATK':np.array([[43, 62, 54, 243, 225, 206, 172, 123]], dtype='uint8'),
    '狂★2ATK':np.array([[43, 62, 54, 243, 225, 206, 172, 123]], dtype='uint8'),
    '術★2ATK':np.array([[43, 62, 54, 243, 225, 206, 172, 123]], dtype='uint8'),
    '騎★2ATK':np.array([[35, 62, 54, 243, 225, 206, 166, 123]], dtype='uint8'),
    '全★3ATK':np.array([[5, 60, 54, 243, 225, 222, 167, 121]], dtype='uint8'),
    '剣★3ATK':np.array([[39, 60, 52, 243, 225, 206, 183, 121]], dtype='uint8'),
    '弓★3ATK':np.array([[39, 60, 52, 243, 225, 206, 175, 121]], dtype='uint8'),
    '槍★3ATK':np.array([[39, 60, 52, 243, 225, 206, 191, 121]], dtype='uint8'),
    '殺★3ATK':np.array([[7, 60, 52, 243, 225, 206, 191, 121]], dtype='uint8'),
    '狂★2ATK':np.array([[43, 62, 54, 243, 225, 206, 172, 123]], dtype='uint8'),
    '術★eATK':np.array([[39, 60, 52, 243, 225, 206, 175, 121]], dtype='uint8'),
    '騎★3ATK':np.array([[7, 60, 52, 243, 225, 206, 191, 121]], dtype='uint8'),
    '全★1HP':np.array([[193, 135, 238, 215, 119, 204, 245, 247]], dtype='uint8'),
    '剣★1HP':np.array([[193, 181, 206, 214, 117, 78, 117, 231]], dtype='uint8'),
    '弓★1HP':np.array([[193, 181, 206, 214, 117, 78, 245, 231]], dtype='uint8'),
    '槍★1HP':np.array([[193, 181, 206, 214, 117, 78, 117, 231]], dtype='uint8'),
    '殺★1HP':np.array([[193, 181, 206, 214, 117, 78, 117, 231]], dtype='uint8'),
    '狂★1HP':np.array([[193, 181, 206, 214, 117, 78, 117, 231]], dtype='uint8'),
    '術★1HP':np.array([[193, 181, 238, 214, 117, 78, 117, 231]], dtype='uint8'),
    '騎★1HP':np.array([[193, 181, 206, 214, 117, 78, 245, 231]], dtype='uint8'),
    '全★2HP':np.array([[129, 177, 238, 222, 53, 78, 245, 247]], dtype='uint8'),
    '剣★2HP':np.array([[193, 177, 238, 214, 53, 76, 117, 119]], dtype='uint8'),
    '弓★2HP':np.array([[193, 177, 206, 214, 117, 76, 117, 119]], dtype='uint8'),
    '槍★2HP':np.array([[193, 177, 206, 214, 117, 76, 117, 119]], dtype='uint8'),
    '殺★2HP':np.array([[193, 177, 238, 214, 53, 204, 117, 117]], dtype='uint8'),
    '狂★2HP':np.array([[193, 177, 238, 214, 53, 204, 117, 117]], dtype='uint8'),
    '術★2HP':np.array([[193, 177, 206, 214, 117, 76, 117, 119]], dtype='uint8'),
    '騎★2HP':np.array([[129, 177, 206, 214, 117, 76, 85, 119]], dtype='uint8'),
    '全★3HP':np.array([[129, 241, 238, 210, 53, 78, 181, 247]], dtype='uint8'),
    '剣★3HP':np.array([[197, 177, 238, 218, 53, 78, 161, 119]], dtype='uint8'),
    '弓★3HP':np.array([[197, 177, 230, 218, 53, 78, 161, 119]], dtype='uint8'),
    '槍★3HP':np.array([[197, 177, 238, 218, 53, 78, 161, 119]], dtype='uint8'),
    '殺★3HP':np.array([[197, 177, 230, 218, 53, 78, 161, 119]], dtype='uint8'),
    '狂★3HP':np.array([[197, 177, 230, 218, 53, 78, 161, 119]], dtype='uint8'),
    '術★3HP':np.array([[197, 177, 206, 218, 53, 78, 161, 247]], dtype='uint8'),
    '騎★3HP':np.array([[197, 177, 230, 218, 53, 78, 161, 119]], dtype='uint8'),
    '全★1ATK変換':np.array([[3, 120, 7, 248, 239, 206, 244, 79]], dtype='uint8'),
    '剣★1ATK変換':np.array([[3, 248, 7, 248, 239, 206, 252, 79]], dtype='uint8'),
    '弓★1ATK変換':np.array([[3, 120, 7, 248, 239, 206, 252, 79]], dtype='uint8'),
    '槍★1ATK変換':np.array([[3, 120, 7, 248, 239, 206, 252, 15]], dtype='uint8'),
    '殺★1ATK変換':np.array([[3, 120, 7, 248, 239, 206, 252, 15]], dtype='uint8'),
    '狂★1ATK変換':np.array([[3, 248, 7, 248, 239, 206, 252, 79]], dtype='uint8'),
    '術★1ATK変換':np.array([[3, 120, 7, 248, 239, 206, 252, 15]], dtype='uint8'),
    '騎★1ATK変換':np.array([[3, 120, 7, 248, 239, 206, 252, 15]], dtype='uint8'),
    '全★2ATK変換':np.array([[7, 56, 7, 248, 239, 206, 252, 15]], dtype='uint8'),
    '剣★2ATK変換':np.array([[7, 56, 7, 248, 231, 206, 252, 79]], dtype='uint8'),
    '弓★2ATK変換':np.array([[7, 120, 7, 248, 231, 206, 252, 79]], dtype='uint8'),
    '槍★2ATK変換':np.array([[7, 56, 7, 240, 231, 206, 252, 79]], dtype='uint8'),
    '殺★2ATK変換':np.array([[7, 120, 7, 248, 231, 206, 252, 79]], dtype='uint8'),
    '狂★2ATK変換':np.array([[7, 56, 7, 248, 231, 206, 252, 79]], dtype='uint8'),
    '術★2ATK変換':np.array([[7, 56, 7, 240, 231, 206, 252, 79]], dtype='uint8'),
    '騎★2ATK変換':np.array([[7, 56, 7, 240, 231, 206, 252, 79]], dtype='uint8'),
    '全★3ATK変換':np.array([[7, 190, 126, 248, 173, 199, 248, 90]], dtype='uint8'),
    '剣★3ATK変換':np.array([[7, 30, 122, 248, 173, 215, 248, 90]], dtype='uint8'),
    '弓★3ATK変換':np.array([[7, 30, 122, 248, 173, 199, 248, 90]], dtype='uint8'),
    '槍★3ATK変換':np.array([[7, 30, 122, 248, 173, 199, 248, 90]], dtype='uint8'),
    '殺★3ATK変換':np.array([[7, 62, 122, 248, 173, 223, 248, 90]], dtype='uint8'),
    '狂★3ATK変換':np.array([[7, 62, 122, 248, 173, 159, 248, 122]], dtype='uint8'),
    '術★3ATK変換':np.array([[7, 62, 122, 248, 173, 159, 248, 122]], dtype='uint8'),
    '騎★3ATK変換':np.array([[7, 62, 122, 248, 173, 159, 248, 122]], dtype='uint8'),
    '全★1HP変換':np.array([[131, 240, 143, 248, 103, 14, 240, 135]], dtype='uint8'),
    '剣★1HP変換':np.array([[135, 240, 143, 248, 39, 14, 240, 7]], dtype='uint8'),
    '弓★1HP変換':np.array([[135, 240, 143, 248, 39, 14, 240, 7]], dtype='uint8'),
    '槍★1HP変換':np.array([[135, 240, 143, 248, 39, 14, 240, 7]], dtype='uint8'),
    '殺★1HP変換':np.array([[135, 240, 7, 248, 55, 78, 244, 7]], dtype='uint8'),
    '狂★1HP変換':np.array([[135, 240, 15, 248, 55, 14, 240, 7]], dtype='uint8'),
    '術★1HP変換':np.array([[135, 240, 15, 248, 55, 14, 241, 7]], dtype='uint8'),
    '騎★1HP変換':np.array([[135, 240, 15, 248, 39, 14, 240, 7]], dtype='uint8'),
    '全★2HP変換':np.array([[135, 240, 143, 248, 167, 14, 240, 7]], dtype='uint8'),
    '剣★2HP変換':np.array([[135, 240, 143, 248, 53, 14, 245, 7]], dtype='uint8'),
    '弓★2HP変換':np.array([[135, 240, 143, 248, 53, 14, 241, 7]], dtype='uint8'),
    '槍★2HP変換':np.array([[135, 240, 143, 240, 103, 14, 241, 7]], dtype='uint8'),
    '殺★3HP変換':np.array([[7, 147, 250, 248, 173, 15, 248, 242]], dtype='uint8'),
    '狂★2HP変換':np.array([[135, 240, 143, 248, 229, 14, 241, 7]], dtype='uint8'),
    '術★2HP変換':np.array([[135, 240, 143, 248, 229, 14, 241, 7]], dtype='uint8'),
    '騎★2HP変換':np.array([[135, 240, 143, 248, 39, 14, 241, 7]], dtype='uint8'),
    '全★3HP変換':np.array([[7, 151, 250, 248, 165, 15, 248, 242]], dtype='uint8'),
    '剣★3HP変換':np.array([[7, 147, 250, 248, 165, 15, 248, 242]], dtype='uint8'),
    '弓★3HP変換':np.array([[7, 147, 250, 248, 165, 15, 248, 242]], dtype='uint8'),
    '槍★3HP変換':np.array([[7, 147, 250, 248, 173, 15, 248, 242]], dtype='uint8'),
    '殺★3HP変換':np.array([[7, 147, 250, 248, 165, 15, 248, 242]], dtype='uint8'),
    '狂★3HP変換':np.array([[7, 147, 250, 248, 165, 15, 248, 114]], dtype='uint8'),
    '術★3HP変換':np.array([[7, 147, 250, 248, 165, 15, 248, 242]], dtype='uint8'),
    '騎★3HP変換':np.array([[7, 147, 250, 248, 165, 15, 248, 114]], dtype='uint8'),
    }
dist_status_class = {
    '全★1ATK':np.array([[197, 90, 173, 150, 10, 244, 208, 15]], dtype='uint8'),
    '剣★1ATK':np.array([[49, 59, 14, 195, 214, 244, 133, 171]], dtype='uint8'),
    '弓★1ATK':np.array([[230, 207, 24, 82, 159, 217, 128, 182]], dtype='uint8'),
    '槍★1ATK':np.array([[193, 195, 66, 72, 152, 240, 100, 179]], dtype='uint8'),
    '殺★1ATK':np.array([[210, 203, 14, 18, 83, 208, 147, 131]], dtype='uint8'),
    '狂★1ATK':np.array([[19, 203, 204, 86, 62, 176, 51, 179]], dtype='uint8'),
    '術★1ATK':np.array([[89, 91, 158, 134, 242, 208, 36, 230]], dtype='uint8'),
    '騎★1ATK':np.array([[177, 155, 206, 78, 156, 212, 131, 167]], dtype='uint8'),
    '全★2ATK':np.array([[197, 90, 173, 148, 74, 228, 208, 79]], dtype='uint8'),
    '剣★2ATK':np.array([[53, 50, 45, 197, 202, 116, 211, 85]], dtype='uint8'),
    '弓★2ATK':np.array([[229, 82, 169, 20, 203, 73, 210, 214]], dtype='uint8'),
    '槍★2ATK':np.array([[212, 226, 205, 28, 152, 114, 225, 215]], dtype='uint8'),
    '殺★2ATK':np.array([[213, 218, 45, 52, 203, 192, 179, 195]], dtype='uint8'),
    '狂★2ATK':np.array([[21, 202, 205, 52, 234, 52, 51, 85]], dtype='uint8'),
    '術★2ATK':np.array([[85, 90, 141, 134, 194, 88, 46, 103]], dtype='uint8'),
    '騎★2ATK':np.array([[245, 154, 173, 36, 202, 198, 211, 101]], dtype='uint8'),
    '全★3ATK':np.array([[197, 82, 169, 214, 74, 212, 240, 15]], dtype='uint8'),
    '剣★3ATK':np.array([[49, 58, 9, 195, 218, 244, 195, 163]], dtype='uint8'),
    '弓★3ATK':np.array([[229, 202, 57, 82, 218, 217, 182, 182]], dtype='uint8'),
    '槍★3ATK':np.array([[197, 194, 75, 76, 152, 240, 228, 179]], dtype='uint8'),
    '殺★3ATK':np.array([[209, 202, 44, 18, 251, 208, 179, 203]], dtype='uint8'),
    '狂★2ATK':np.array([[21, 202, 205, 52, 234, 52, 51, 85]], dtype='uint8'),
    '術★eATK':np.array([[125, 90, 139, 198, 242, 240, 44, 230]], dtype='uint8'),
    '騎★3ATK':np.array([[241, 155, 237, 102, 220, 214, 195, 167]], dtype='uint8'),
    '全★1HP':np.array([[197, 90, 237, 146, 90, 236, 210, 45]], dtype='uint8'),
    '剣★1HP':np.array([[53, 18, 45, 203, 211, 44, 211, 109]], dtype='uint8'),
    '弓★1HP':np.array([[229, 82, 41, 54, 219, 9, 146, 180]], dtype='uint8'),
    '槍★1HP':np.array([[197, 194, 205, 28, 152, 120, 245, 235]], dtype='uint8'),
    '殺★1HP':np.array([[213, 218, 45, 54, 211, 232, 147, 201]], dtype='uint8'),
    '狂★1HP':np.array([[37, 202, 205, 54, 210, 60, 179, 109]], dtype='uint8'),
    '術★1HP':np.array([[117, 90, 141, 134, 211, 104, 6, 102]], dtype='uint8'),
    '騎★1HP':np.array([[181, 18, 141, 110, 218, 140, 211, 237]], dtype='uint8'),
    '全★2HP':np.array([[197, 90, 173, 148, 74, 236, 208, 79]], dtype='uint8'),
    '剣★2HP':np.array([[53, 50, 13, 201, 195, 44, 211, 77]], dtype='uint8'),
    '弓★2HP':np.array([[229, 82, 45, 60, 195, 9, 210, 214]], dtype='uint8'),
    '槍★2HP':np.array([[197, 226, 13, 28, 152, 122, 241, 203]], dtype='uint8'),
    '殺★2HP':np.array([[213, 218, 45, 60, 211, 232, 211, 203]], dtype='uint8'),
    '狂★2HP':np.array([[53, 202, 205, 60, 194, 40, 179, 239]], dtype='uint8'),
    '術★2HP':np.array([[229, 90, 141, 134, 195, 104, 246, 100]], dtype='uint8'),
    '騎★2HP':np.array([[181, 82, 141, 108, 200, 140, 211, 205]], dtype='uint8'),
    '全★3HP':np.array([[197, 90, 241, 146, 90, 244, 240, 47]], dtype='uint8'),
    '剣★3HP':np.array([[53, 50, 13, 201, 210, 252, 211, 239]], dtype='uint8'),
    '弓★3HP':np.array([[229, 74, 137, 56, 202, 73, 210, 182]], dtype='uint8'),
    '槍★3HP':np.array([[197, 226, 77, 12, 152, 114, 229, 243]], dtype='uint8'),
    '殺★3HP':np.array([[213, 202, 44, 60, 211, 200, 243, 203]], dtype='uint8'),
    '狂★3HP':np.array([[53, 203, 204, 60, 242, 56, 51, 43]], dtype='uint8'),
    '術★3HP':np.array([[117, 90, 141, 134, 210, 120, 102, 102]], dtype='uint8'),
    '騎★3HP':np.array([[181, 218, 165, 44, 220, 206, 211, 239]], dtype='uint8'),
    '全★1ATK変換':np.array([[3, 120, 7, 248, 239, 206, 244, 79]], dtype='uint8'),
    '剣★1ATK変換':np.array([[3, 248, 7, 248, 239, 206, 252, 79]], dtype='uint8'),
    '弓★1ATK変換':np.array([[3, 120, 7, 248, 239, 206, 252, 79]], dtype='uint8'),
    '槍★1ATK変換':np.array([[3, 120, 7, 248, 239, 206, 252, 15]], dtype='uint8'),
    '殺★1ATK変換':np.array([[3, 120, 7, 248, 239, 206, 252, 15]], dtype='uint8'),
    '狂★1ATK変換':np.array([[3, 248, 7, 248, 239, 206, 252, 79]], dtype='uint8'),
    '術★1ATK変換':np.array([[3, 120, 7, 248, 239, 206, 252, 15]], dtype='uint8'),
    '騎★1ATK変換':np.array([[3, 120, 7, 248, 239, 206, 252, 15]], dtype='uint8'),
    '全★2ATK変換':np.array([[7, 56, 7, 248, 239, 206, 252, 15]], dtype='uint8'),
    '剣★2ATK変換':np.array([[7, 56, 7, 248, 231, 206, 252, 79]], dtype='uint8'),
    '弓★2ATK変換':np.array([[7, 120, 7, 248, 231, 206, 252, 79]], dtype='uint8'),
    '槍★2ATK変換':np.array([[7, 56, 7, 240, 231, 206, 252, 79]], dtype='uint8'),
    '殺★2ATK変換':np.array([[7, 120, 7, 248, 231, 206, 252, 79]], dtype='uint8'),
    '狂★2ATK変換':np.array([[7, 56, 7, 248, 231, 206, 252, 79]], dtype='uint8'),
    '術★2ATK変換':np.array([[7, 56, 7, 240, 231, 206, 252, 79]], dtype='uint8'),
    '騎★2ATK変換':np.array([[7, 56, 7, 240, 231, 206, 252, 79]], dtype='uint8'),
    '全★3ATK変換':np.array([[7, 190, 126, 248, 173, 199, 248, 90]], dtype='uint8'),
    '剣★3ATK変換':np.array([[7, 30, 122, 248, 173, 215, 248, 90]], dtype='uint8'),
    '弓★3ATK変換':np.array([[7, 30, 122, 248, 173, 199, 248, 90]], dtype='uint8'),
    '槍★3ATK変換':np.array([[7, 30, 122, 248, 173, 199, 248, 90]], dtype='uint8'),
    '殺★3ATK変換':np.array([[7, 62, 122, 248, 173, 223, 248, 90]], dtype='uint8'),
    '狂★3ATK変換':np.array([[7, 62, 122, 248, 173, 159, 248, 122]], dtype='uint8'),
    '術★3ATK変換':np.array([[7, 62, 122, 248, 173, 159, 248, 122]], dtype='uint8'),
    '騎★3ATK変換':np.array([[7, 62, 122, 248, 173, 159, 248, 122]], dtype='uint8'),
    '全★1HP変換':np.array([[131, 240, 143, 248, 103, 14, 240, 135]], dtype='uint8'),
    '剣★1HP変換':np.array([[135, 240, 143, 248, 39, 14, 240, 7]], dtype='uint8'),
    '弓★1HP変換':np.array([[135, 240, 143, 248, 39, 14, 240, 7]], dtype='uint8'),
    '槍★1HP変換':np.array([[135, 240, 143, 248, 39, 14, 240, 7]], dtype='uint8'),
    '殺★1HP変換':np.array([[135, 240, 7, 248, 55, 78, 244, 7]], dtype='uint8'),
    '狂★1HP変換':np.array([[135, 240, 15, 248, 55, 14, 240, 7]], dtype='uint8'),
    '術★1HP変換':np.array([[135, 240, 15, 248, 55, 14, 241, 7]], dtype='uint8'),
    '騎★1HP変換':np.array([[135, 240, 15, 248, 39, 14, 240, 7]], dtype='uint8'),
    '全★2HP変換':np.array([[135, 240, 143, 248, 167, 14, 240, 7]], dtype='uint8'),
    '剣★2HP変換':np.array([[135, 240, 143, 248, 53, 14, 245, 7]], dtype='uint8'),
    '弓★2HP変換':np.array([[135, 240, 143, 248, 53, 14, 241, 7]], dtype='uint8'),
    '槍★2HP変換':np.array([[135, 240, 143, 240, 103, 14, 241, 7]], dtype='uint8'),
    '殺★3HP変換':np.array([[7, 147, 250, 248, 173, 15, 248, 242]], dtype='uint8'),
    '狂★2HP変換':np.array([[135, 240, 143, 248, 229, 14, 241, 7]], dtype='uint8'),
    '術★2HP変換':np.array([[135, 240, 143, 248, 229, 14, 241, 7]], dtype='uint8'),
    '騎★2HP変換':np.array([[135, 240, 143, 248, 39, 14, 241, 7]], dtype='uint8'),
    '全★3HP変換':np.array([[7, 151, 250, 248, 165, 15, 248, 242]], dtype='uint8'),
    '剣★3HP変換':np.array([[7, 147, 250, 248, 165, 15, 248, 242]], dtype='uint8'),
    '弓★3HP変換':np.array([[7, 147, 250, 248, 165, 15, 248, 242]], dtype='uint8'),
    '槍★3HP変換':np.array([[7, 147, 250, 248, 173, 15, 248, 242]], dtype='uint8'),
    '殺★3HP変換':np.array([[7, 147, 250, 248, 165, 15, 248, 242]], dtype='uint8'),
    '狂★3HP変換':np.array([[7, 147, 250, 248, 165, 15, 248, 114]], dtype='uint8'),
    '術★3HP変換':np.array([[7, 147, 250, 248, 165, 15, 248, 242]], dtype='uint8'),
    '騎★3HP変換':np.array([[7, 147, 250, 248, 165, 15, 248, 114]], dtype='uint8'),
    }

std_item_dic = {}
##for i in std_item:
##    std_item_dic[i] = 0

std_item_stone_dic = {}
for i in std_item_stone:
    std_item_stone_dic[i] = 0

def imread(filename, flags=cv2.IMREAD_COLOR, dtype=np.uint8):
    """
    OpenCVのimreadが日本語ファイル名が読めない対策
    """
    try:
        n = np.fromfile(filename, dtype)
        img = cv2.imdecode(n, flags)
        return img
    except Exception as e:
        print(e)
        return None

def has_intersect(a, b):
    """
    二つの矩形の当たり判定
    """
    return max(a[0], b[0]) <= min(a[2], b[2]) \
           and max(a[1], b[1]) <= min(a[3], b[3])

class ScreenShot:
    """
    スクリーンショットを表すクラス
    """
    def __init__(self, img_rgb, svm_card, svm_rarity, args):
##        TRAINING_IMG_WIDTH = 1906
        TRAINING_IMG_WIDTH = 968
        threshold = 80
        self.img_rgb_orig = img_rgb
        self.img_gray_orig = cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY)

        game_screen = self.extract_game_screen(args)
        if args.debug:
            cv2.imwrite('game_screen.png', game_screen)

        height_g, width_g, _ = game_screen.shape
        wscale = (1.0 * width_g) / TRAINING_IMG_WIDTH
        resizeScale = 1 / wscale

        if resizeScale > 1:
            matImgResize = 1 / resizeScale
            self.img_rgb = cv2.resize(game_screen, (0,0), fx=resizeScale, fy=resizeScale, interpolation=cv2.INTER_CUBIC)
        else:
            self.img_rgb = cv2.resize(game_screen, (0,0), fx=resizeScale, fy=resizeScale, interpolation=cv2.INTER_AREA)

        if args.debug:
            cv2.imwrite('game_screen_resize.png', self.img_rgb)

        self.img_gray = cv2.cvtColor(self.img_rgb, cv2.COLOR_BGR2GRAY)
        item_pts = self.img2points(args.num)
        # 位置微修正
##        item_pts = self.fitpts(item_pts)
        self.items = []
 
        for i, pt in enumerate(item_pts):
            item_img_rgb = self.img_rgb[pt[1]: pt[3], pt[0]: pt[2]]
            title_img_rgb = self.img_rgb[pt[3] + 1: pt[3] + 10, pt[0] + 31: pt[0] + 98]
##            item_img_gray = self.img_gray[pt[1] :  pt[3],  pt[0] :  pt[2]]
            self.items.append(Item(item_img_rgb, title_img_rgb, svm_card, svm_rarity, args.debug))
            if args.debug:
                cv2.imwrite('item' + str(i) + '.png', item_img_rgb)

        self.itemlist = self.makelist()
        self.allitemlist = self.makelallist()
        self.allitemdic = dict(Counter(self.allitemlist))

    def makelist(self):
        """
        アイテムをリスト出力
        """
        itemlist = []
        for i, item in enumerate(self.items):
            name = item.name
            itemlist.append(name)
        return itemlist


    def tempolary_resize(self):
        '''
        主に低解像度機種での位置誤差をなくすため拡大する
        拡大対象は横額縁が無い機種
        '''
        TRAINING_IMG_WIDTH = 2048
        NO_EDGE_RATIO = 0.02
        height_o, width_o = self.img_rgb_orig.shape[:2]

        lower_w = np.array([210, 100, 200])
        upper_w = np.array([255, 255, 255])
        img_mask_w = cv2.inRange(self.img_rgb_orig, lower_w, upper_w)

        closebutton_pts = []
        contours = cv2.findContours(img_mask_w, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[0]
        for cnt in contours:
            area = cv2.contourArea(cnt)
            if area > 500:
                ret = cv2.boundingRect(cnt)
                pts = [ret[0], ret[1], ret[0] + ret[2], ret[1] + ret[3]]
                if ret[0] < width_o / 4 and ret[1] < height_o / 4 and 2.2 < ret[2] / ret[3] < 2.5:
                    closebutton_pts.append(pts)
        closebutton_pts.sort()

        if closebutton_pts[0][0] / width_o < NO_EDGE_RATIO:
            wscale = (1.0 * width_o) / TRAINING_IMG_WIDTH
            resizeScale = 1 / wscale

            if resizeScale > 1:
                matImgResize = 1 / resizeScale
                self.img_rgb_orig = cv2.resize(self.img_rgb_orig, (0,0), fx=resizeScale, fy=resizeScale, interpolation=cv2.INTER_CUBIC)
            else:
                self.img_rgb_orig = cv2.resize(self.img_rgb_orig, (0,0), fx=resizeScale, fy=resizeScale, interpolation=cv2.INTER_AREA)
        
    def extract_game_screen(self, args):
        """
        額縁の影響を除去してどのスクショでも同じ画面を切り出す
        """
        self.tempolary_resize()
        height, width = self.img_rgb_orig.shape[:2]
        lower_w = np.array([100,100,100]) 
        upper_w = np.array([255,255,255])
        img_mask_w = cv2.inRange(self.img_rgb_orig, lower_w, upper_w)

        contours, hierarchy = cv2.findContours(img_mask_w, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

        button = {}

        for i, cnt in enumerate(contours):
            area = cv2.contourArea(cnt)
            if area > 7000:
                epsilon = 0.01*cv2.arcLength(cnt,True)
                approx = cv2.approxPolyDP(cnt,epsilon,True)
                if len(approx) == 4:        
                    ret = cv2.boundingRect(cnt)
                    pts = [ ret[0], ret[1], ret[0] + ret[2], ret[1] + ret[3] ]
                    if pts[1] > height*3/4 and pts[3] > height*3/4: 
                        if hierarchy[0, i][3] in button: #子要素がある場合親要素を消して追加
                            del button[hierarchy[0, i][3]]
                            button[i] = pts
                        else:
                            button[i] = pts

        button_pts = list(button.values())
        button_pts.sort()
        if args.debug:
            print("認識したボタン位置:", end="")
            print(button_pts)

        ### ボタンの位置から高さ・幅を決めてしまう
        ### ずれがわかりやすいように所持サーヴァントの角で切る ipad 2018 (71,339)
        ### 画像の中心: 1024
        ### (71, 339) (1977, 1315)
        ##ボタンの位置: [[241, 1223, 501, 1315], [641, 1223, 901, 1315],
        ##         [1036, 1223, 1404, 1315], [1543, 1223, 1803, 1315]]
        button_width = button_pts[-1][2] - button_pts[0][0]

        if args.old:
            # 連続召喚実装以前の召喚画像の座標
            cut_x1 = int((width - (2003 - 217)*button_width/(1794 - 424))/2)
            cut_x2 = width - cut_x1
            cut_y1 = button_pts[0][-1] - int((1053 - 138)*button_width/(1794 - 424))
            cut_y2 = button_pts[0][-1]
        else:
            cut_x1 = int((width - (1977 - 71)*button_width/(1803 - 241))/2)
            cut_x2 = width - cut_x1
            cut_y1 = button_pts[0][-1] - int((1315 - 339)*button_width/(1803 - 241))
            cut_y2 = button_pts[0][-1]

        gamescreen = self.img_rgb_orig[cut_y1:cut_y2,cut_x1:cut_x2]

        return gamescreen

    def makelallist(self):
        """
        アイテムを出力
        """
        itemlist = []
        for i, item in enumerate(self.items):
            name = item.name
            itemlist.append(name + "")
        return itemlist

    def fitpts(self, pts):
        """
        カード位置を微修正する
        """
        thresh,bin_img = cv2.threshold(self.img_gray,0,255,cv2.THRESH_BINARY_INV+cv2.THRESH_OTSU)
        tmp_pts = []

        cards = ['ce', 'exp_up', 'servant', 'status_up']
        for card in cards:
            template = cv2.imread('data/template/' + card + '.png',0)
            w, h = template.shape[::-1]
            res = cv2.matchTemplate(bin_img,template,cv2.TM_CCOEFF_NORMED)
            threshold = 0.7
            loc = np.where( res >= threshold)
            for pt in zip(*loc[::-1]):
                new_pt = [pt[0] -6 , pt[1] + h + 3 - 288,pt[0] -6 + 264, pt[1] + h + 3]
                flag = False
                for pt2 in tmp_pts:
                    if has_intersect(new_pt, pt2):
                        flag = True
                        break
                if flag == False:
                    tmp_pts.append(new_pt)
        if len(tmp_pts) == 11:
            return tmp_pts
        new_pts = []
        for pt1 in pts:
            flag = False
            for pt2 in tmp_pts:
                if has_intersect(pt1, pt2):
                    flag = True
                    break
            if flag == True:
                new_pts.append(pt2)
            else:
                new_pts.append(pt1)
        return new_pts

    def img2points(self, num):
        """
        カードが出現する座標
        """

        if num == "10":
            pts = [(39, 83, 167, 211), (192, 83, 320, 211),
                   (344, 83, 472, 211),
                   (496, 83, 624, 211), (648, 83, 776, 211),
                   (801, 83, 929, 211),
                   (192, 266, 320, 394), (344, 266, 472, 394),
                   (496, 266, 624, 394), (648, 266, 776, 394)]
        else:
            pts = [(39, 83, 167, 211), (192, 83, 320, 211),
                   (344, 83, 472, 211),
                   (496, 83, 624, 211), (648, 83, 776, 211),
                   (801, 83, 929, 211),
                   (115, 266, 243, 394), (268, 266, 396, 394),
                   (420, 266, 548, 394),
                   (572, 266, 700, 394), (725, 266, 852, 394)]
        return pts

class Item:
    def __init__(self, img_rgb, title_img_rgb, svm_card, svm_rarity, debug=False):
        self.img_rgb = img_rgb
        self.title_img_rgb = title_img_rgb
        self.card = self.classify_card(svm_card)
        self.name = self.classify_item(svm_rarity)
        if debug:
            print(self.card, end=": ")
            print(self.name)

    def make_new_servant(self):
        """
        ファイル名候補を探す
        """
        for i in range(999):
            itemfile = Servant_dir / ('servant{:0=3}'.format(i + 1) + '.png')
            if itemfile.is_file():
                continue
            else:
                cv2.imwrite(itemfile.as_posix(), self.img_rgb)
                dist_local_servant[itemfile] = compute_hash_inner(self.img_rgb)
                break
        return itemfile.stem

    def make_new_ce(self):
        """
        ファイル名候補を探す
        """
        for i in range(999):
            itemfile = CE_dir / ('ce{:0=3}'.format(i + 1) + '.png')
            if itemfile.is_file():
                continue
            else:
                cv2.imwrite(itemfile.as_posix(), self.img_rgb)
                dist_local_ce[itemfile] = compute_hash_inner(self.img_rgb)
                dist_local_ce_center[itemfile] = hasher.compute(self.img_rgb[78:163,86:190])
                break
        return itemfile.stem

    def classify_servant(self):
        """
        既所持のアイテム画像の距離を計算して保持
        """
        hash_item = compute_hash_inner(self.img_rgb) #画像の距離
        itemfiles = {}
        # 既存のアイテムとの距離を比較
        for i in dist_servant.keys():
            d = hasher.compare(hash_item, dist_servant[i])
            if d <= 20: # 16だと誤認識
                itemfiles[i] = d
        if len(itemfiles) > 0:
            itemfiles = sorted(itemfiles.items(), key=lambda x:x[1])
            item = next(iter(itemfiles))
            return item[0]

        return ""

    def classify_ce(self):
        """
        既所持のアイテム画像の距離を計算して保持
        """
        hash_item = compute_hash_inner(self.img_rgb) #画像の距離

        itemfiles = {}
        # 既存のアイテムとの距離を比較
        for i in dist_ce.keys():
            d = hasher.compare(hash_item, dist_ce[i])
            if d <= 17: # 18以上にすると誤認識あり
                itemfiles[i] = d
        if len(itemfiles) > 0:
            itemfiles = sorted(itemfiles.items(), key=lambda x:x[1])
            item = next(iter(itemfiles))
            return item[0]
        #自動変換された礼装の判定
        hash_item = hasher.compute(self.img_rgb[35:77,40:88]) #画像の距離
        itemfiles = {}
        # 既存のアイテムとの距離を比較
        for i in dist_ce_center.keys():
            d = hasher.compare(hash_item, dist_ce_center[i])
            if d <= 15: # 10だと失敗する場合あり
                itemfiles[i] = d
        if len(itemfiles) > 0:
            itemfiles = sorted(itemfiles.items(), key=lambda x:x[1])
            item = next(iter(itemfiles))
            return item[0]

        return ""

    def classify_ccode(self):
        """
        既所持のアイテム画像の距離を計算して保持
        """
        h, w = self.img_rgb.shape[:2]
        size = 54
        hash_item = hasher.compute(self.img_rgb[int(h/2-size/2):int(h/2+size/2),
                                                int(w/2-size/2):int(w/2+size/2)]) #画像の距離
        itemfiles = {}

        # 既存のアイテムとの距離を比較
        for i in dist_ccode.keys():
            d = hasher.compare(hash_item, dist_ccode[i])
            if d <= 20: # 15だとエラー有り
                itemfiles[i] = d
        if len(itemfiles) > 0:
            itemfiles = sorted(itemfiles.items(), key=lambda x:x[1])
            item = next(iter(itemfiles))
            return item[0]

        return ""

    def classify_exp(self):
        """
        既所持のアイテム画像の距離を計算して保持
        """
        hash_item = hasher.compute(self.img_rgb[35:77,40:88]) #画像の距離
        # 自動変換(売却)したときにマナプリアイコンや数字にかぶらない範囲
        itemfiles = {}
        # 既存のアイテムとの距離を比較
        for i in dist_exp.keys():
            d = hasher.compare(hash_item, dist_exp[i])
            if d <= 15:
                itemfiles[i] = d
        if len(itemfiles) > 0:
            itemfiles = sorted(itemfiles.items(), key=lambda x:x[1])
            item = next(iter(itemfiles))
            hash_tanebi_class = self.compute_tanebi_class_hash(self.img_rgb)
            tanebiclassfiles = {}
            for i in dist_tanebi_class.keys():
                if (item[0].replace('変換', ''))[-2:] in i:
                    dtc = hasher.compare(hash_tanebi_class, dist_tanebi_class[i])
                    if dtc <= 22: #22離れることがあったので
                        tanebiclassfiles[i] = dtc
            tanebiclassfiles = sorted(tanebiclassfiles.items(), key=lambda x:x[1])
            if len(tanebiclassfiles) > 0:
                tanebiclass = next(iter(tanebiclassfiles))
                return tanebiclass[0].replace('変換', '')

##           return item[0].replace('変換', '')
            return item[0]

        return ""

    def classify_status(self, svm_rarity):
        """
        既所持のアイテム画像の距離を計算して保持
        """
        rarity = self.classify_rarity(svm_rarity)

        hash_item = compute_hash_exp(self.img_rgb) #画像の距離
        itemfiles = {}
        # 既存のアイテムとの距離を比較
        for i in dist_status.keys():
            d = hasher.compare(hash_item, dist_status[i])
            if d <= 15:
                itemfiles[i] = d
        if len(itemfiles) > 0:
            itemfiles = sorted(itemfiles.items(), key=lambda x:x[1])
            item = next(iter(itemfiles))
            hash_status_class = self.compute_tanebi_class_hash(self.img_rgb)
            statusclassfiles = {}
            for i in dist_status_class.keys():
                # クラス判定
                if (item[0].replace('変換', ''))[-2:] in i:
                    dtc = hasher.compare(hash_status_class, dist_status_class[i])
##                    if dtc <= 20: #18離れることがあったので(Screenshot_20200318-140020.png)
                    statusclassfiles[i] = dtc
            statusclassfiles = sorted(statusclassfiles.items(), key=lambda x:x[1])
            if len(statusclassfiles) > 0:
                statusclass = next(iter(statusclassfiles))
                return statusclass[0][0] + rarity + statusclass[0][3:].replace('変換', '')

            return item[0][0] + rarity + item[0][3:].replace('変換', '')

        return ""

    def classify_local_servant(self):
        """
        既所持のアイテム画像の距離を計算して保持
        """
        hash_item = compute_hash_inner(self.img_rgb) #画像の距離

        itemfiles = {}
        # 既存のアイテムとの距離を比較
        for i in dist_local_servant.keys():
            d = hasher.compare(hash_item, dist_local_servant[i])
            if d <= 20:
                itemfiles[i] = d
        if len(itemfiles) > 0:
            itemfiles = sorted(itemfiles.items(), key=lambda x:x[1])
            item = next(iter(itemfiles))
            return item[0].stem

        return ""

    def classify_local_ce(self):
        """
        既所持のアイテム画像の距離を計算して保持
        """
        hash_item = compute_hash_inner(self.img_rgb) #画像の距離

        itemfiles = {}
        # 既存のアイテムとの距離を比較
        for i in dist_local_ce.keys():
            d = hasher.compare(hash_item, dist_local_ce[i])
            if d <= 15:
                itemfiles[i] = d
        if len(itemfiles) > 0:
            itemfiles = sorted(itemfiles.items(), key=lambda x:x[1])
            item = next(iter(itemfiles))
            return item[0].stem
        #自動変換された礼装の判定
        hash_item = hasher.compute(self.img_rgb[78:163,86:190]) #画像の距離
        itemfiles = {}
        # 既存のアイテムとの距離を比較
        for i in dist_local_ce_center.keys():
            d = hasher.compare(hash_item, dist_local_ce_center[i])
            if d <= 10:
                itemfiles[i] = d
        if len(itemfiles) > 0:
            itemfiles = sorted(itemfiles.items(), key=lambda x:x[1])
            item = next(iter(itemfiles))
            return item[0].stem

        return ""

    def classify_card(self, svm_card):
        """
        カード判別器
       """
        """
        カード判別器
        この場合は画像全域のハッシュをとる
        """
        # Hog特徴のパラメータ
        win_size = (120, 60)
        block_size = (16, 16)
        block_stride = (4, 4)
        cell_size = (4, 4)
        bins = 9
        test = []
        carddic = { 1:'Servant', 2:'Craft Essence', 3:'Exp. UP', 4:'Status UP', 5:"Command Code" }

##        tmpimg = self.img_rgb[265:282,66:198]
        tmpimg = self.title_img_rgb
##        cv2.imshow("img", cv2.resize(tmpimg, dsize=None, fx=5.5, fy=5.5))
##        cv2.waitKey(0)
##        cv2.destroyAllWindows()
##        cv2.imwrite("cardimg.png", tmpimg)
        tmpimg = cv2.resize(tmpimg, (win_size))
        hog = cv2.HOGDescriptor(win_size, block_size, block_stride, cell_size, bins)
        test.append(hog.compute(tmpimg)) # 特徴量の格納
        test = np.array(test)
        pred = svm_card.predict(test)

        return carddic[pred[1][0][0]]

    def classify_rarity(self, svm_rarity):
        """
        レアリティ判別器
        """
        # Hog特徴のパラメータ
        win_size = (120, 60)
        block_size = (16, 16)
        block_stride = (4, 4)
        cell_size = (4, 4)
        bins = 9
        test = []
        raritydic = { 10:'★1', 11:'★1', 20:'★2', 21:'★2', 30:'★3', 31:'★3'}

#        tmpimg = self.img_rgb[205:254,156:253]
        tmpimg = self.img_rgb[99:125,76:125]

        tmpimg = cv2.resize(tmpimg, (win_size))
        hog = cv2.HOGDescriptor(win_size, block_size, block_stride, cell_size, bins)
        test.append(hog.compute(tmpimg)) # 特徴量の格納
        test = np.array(test)
        pred = svm_rarity.predict(test)

        return raritydic[pred[1][0][0]]

    def classify_item(self, svm_rarity, debug=False):
        """
        アイテム判別器
        """
        if self.card == "Servant":
            item = self.classify_servant()
            if item == "":
                item = self.classify_local_servant()
            if item == "":
                item = self.make_new_servant()
        elif self.card == "Craft Essence":
            item = self.classify_ce()
            if item == "":
                item = self.classify_local_ce()
            if item == "":
                item = self.make_new_ce()
        elif self.card == "Command Code":
            item = self.classify_ccode()
        elif self.card == "Exp. UP":
            item =  self.classify_exp()
        elif self.card == "Status UP":
            item =  self.classify_status(svm_rarity)            
        return item

    def compute_tanebi_class_hash(self, img_rgb):
        """
        種火クラス判別器
        記述した比率は枠を取り除いた128x128イメージのの実測値
        """
        height, width = img_rgb.shape[:2]
        img = img_rgb[:34,:35]
        return hasher.compute(img)

def compute_hash_inner(img_rgb):
    """
    判別器
    この判別器は上部のクラスアイコンと下部の★表示を除いた部分を比較するもの
    """
##    img = img_rgb[20:,:]
##    img = img_rgb[34:86,:]
    img = img_rgb[34:104,:]
##    cv2.imshow("img", cv2.resize(img, dsize=None, fx=5.5, fy=5.5))
##    cv2.waitKey(0)
##    cv2.destroyAllWindows()
##    cv2.imwrite("antan_gacha.png", img)

    return hasher.compute(img)

def compute_hash_exp(img_rgb):
    """
    判別器
    この判別器は上部のクラスアイコンと下部の★表示を除いた部分を比較するもの
    """
##    img = img_rgb[20:,:]
    img = img_rgb[34:104,:]
    return hasher.compute(img)

##def compute_hash_rarity(img_rgb):
##    """
##    判別器
##    この判別器はレアリティを比較するもの
##    """
##    img = img_rgb[205:254,156:253]
####    cv2.imshow("img", cv2.resize(img, dsize=None, fx=4.5, fy=4.5))
####    cv2.waitKey(0)
####    cv2.destroyAllWindows()
##    return hasher.compute(img)

def calc_dist_local_servant():
    """
    既所持のアイテム画像の距離(一次元配列)の辞書を作成して保持
    """
    files = Servant_dir.glob('**/*.png')
    for fname in files:
        img = imread(fname)
        dist_local_servant[fname] = compute_hash_inner(img)


def calc_dist_servant():
    """
    既所持のアイテム画像の距離(一次元配列)の辞書を作成して保持
    """
    with open(Servant_dist_file, encoding='UTF-8') as f:
        reader = csv.reader(f)
        for row in reader:    
            dist_servant[row[0]] = np.array([row[2:]], dtype='uint8')

def calc_dist_ce():
    """
    既所持のアイテム画像の距離(一次元配列)の辞書を作成して保持
    """
    with open(CE_dist_file, encoding='UTF-8') as f:
        reader = csv.reader(f)
        for row in reader:    
            dist_ce[row[0]] = np.array([row[2:]], dtype='uint8')

    with open(CE_center_dist_file, encoding='UTF-8') as f:
        reader = csv.reader(f)
        for row in reader:    
            dist_ce_center[row[0]] = np.array([row[2:]], dtype='uint8')

def calc_dist_ccode():
    """
    既所持のアイテム画像の距離(一次元配列)の辞書を作成して保持
    """
    with open(CCode_dist_file, encoding='UTF-8') as f:
        reader = csv.reader(f)
        for row in reader:    
            dist_ccode[row[0]] = np.array([row[2:]], dtype='uint8')

def calc_dist_local_ce():
    """
    既所持のアイテム画像の距離(一次元配列)の辞書を作成して保持
    """
    files = CE_dir.glob('**/*.png')
    for fname in files:
        img = imread(fname)
        dist_local_ce[fname] = compute_hash_inner(img)
        dist_local_ce_center[fname] = hasher.compute(img[35:77,40:88])


def make_std_item():
    # 鯖リストを作成
    # ★0-2鯖はそのまま
    # ★3-4鯖はホワイトリストのみ読み込む
    with open(FP_34Servant_wl, encoding='UTF-8') as f:
        wl_servants = [s.strip() for s in f.readlines()]

    servant = []
    with open(Servant_dist_file, encoding='UTF-8') as f:
        reader = csv.reader(f)
        for row in reader:
            if row[1] in ['0', '1', '2']:
                servant.append(row[0])
            elif row[1] in ['3', '4'] and row[0] in wl_servants:
                servant.append(row[0])
    # 礼装リストを作成
    # ★1-2礼装はブラックリストを除外
    # ★3礼装はホワイトリストのみ読み込む
    with open(FP_12CE_bl, encoding='UTF-8') as f:
        bl_ce = [s.strip() for s in f.readlines()]
    with open(FP_3CE_wl, encoding='UTF-8') as f:
        wl_ce = [s.strip() for s in f.readlines()]

    ce = []
    with open(CE_dist_file, encoding='UTF-8') as f:
        reader = csv.reader(f)
        for row in reader:
            if row[1] in ['1', '2'] and row[0] not in bl_ce:
                ce.append(row[0])
            elif row[1] in ['3'] and row[0] in wl_ce:
                ce.append(row[0])
    ccode = []
    with open(CCode_dist_file, encoding='UTF-8') as f:
        reader = csv.reader(f)
        for row in reader:
            if row[1] in ['1', '2']:
                ccode.append(row[0])

    std_item = servant \
               + exp_1star + exp_2star + exp_3star + exp_4star + exp_5star \
               + status_1star + status_2star + status_3star \
               + ce \
               + ccode

    for i in std_item:
        std_item_dic[i] = 0

##std_item = servant_0star + servant_1star + servant_2star \
##           + servant_3star + servant_4star \
##           + exp_1star + exp_2star + exp_3star + exp_4star + exp_5star \
##           + status_1star + status_2star + status_3star \
##           + ce_1star + ce_2star + ce_3star \
##           + ccode_1star + ccode_2star
    
def get_output(filenames, args):
    """
    出力内容を作成
    """
    calc_dist_local_servant()
    calc_dist_servant()
    calc_dist_local_ce()
    calc_dist_ce()
    calc_dist_ccode()
    make_std_item()
    svm_card = cv2.ml.SVM_load(str(train_card))
    svm_rarity = cv2.ml.SVM_load(str(train_rarity))

    csvfieldnames = { 'filename' : "合計",  '召喚数': "" } #CSVフィールド名用 key しか使わない
    wholelist = []
    outputcsv = [] #出力
    prev_itemlist = [] #重複チェック用
    num_summon = 0

    for filename in filenames:
        if args.debug:
            print(filename)
        f = Path(filename)

        if f.exists() == False:
            output = { 'filename': str(filename) + ': Not Found' }
        else:            
            img_rgb = imread(filename)

            try:
                sc = ScreenShot(img_rgb, svm_card, svm_rarity, args)
                #戦利品順番ルールに則った対応による出力処理
                if prev_itemlist == sc.itemlist:
                    output = ({'filename': str(filename) + ': Duplicate'})
                else:              
                    wholelist = wholelist + sc.itemlist
                    output = { 'filename': filename }
                    output.update(sc.allitemdic)
                    output['召喚数'] = len(sc.itemlist)
                    num_summon = num_summon + int(args.num)
                prev_itemlist = sc.itemlist
            except:
                output = ({'filename': str(filename) + ': not valid'})
        outputcsv.append(output)

    tmpdic = {'召喚数': num_summon }
    csvfieldnames.update(tmpdic)
    if args.mode == "stone":
        std_item_stone_dic.update(dict(Counter(wholelist)))
        csvfieldnames.update(std_item_stone_dic)
    else:
        std_item_dic.update(dict(Counter(wholelist)))
        csvfieldnames.update(std_item_dic)

    return csvfieldnames, outputcsv

if __name__ == '__main__':
    ## オプションの解析
    parser = argparse.ArgumentParser(description='FGOの召喚スクショを数えをCSV出力する')
    # 3. parser.add_argumentで受け取る引数を追加していく
    parser.add_argument('filenames', help='入力ファイル', nargs='*')    # 必須の引数を追加
    parser.add_argument('-m', '--mode', help='召喚モード フレポ:fp 聖晶石:stone', choices=['fp', 'stone'], default='FP')
    parser.add_argument('-n', '--num', help='召喚数', choices=['10', '11'], default='10')
    parser.add_argument('-f', '--folder', help='フォルダで指定')
    parser.add_argument('-o', '--old', help='2018年8月以前の召喚画面', action='store_true')
    parser.add_argument('-d', '--debug', help='デバッグ情報の出力', action='store_true')
    parser.add_argument('--version', action='version', version=progname + " " + version)

    args = parser.parse_args()    # 引数を解析

    if not Item_dir.is_dir():
        Item_dir.mkdir()
    if not Servant_dir.is_dir():
        Servant_dir.mkdir()
    if not CE_dir.is_dir():
        CE_dir.mkdir()

    if args.folder:
        inputs = [x for x in Path(args.folder).iterdir()]
    else:
        inputs = args.filenames
    
    csvfieldnames, outputcsv = get_output(inputs, args)

    fnames = csvfieldnames.keys()
    writer = csv.DictWriter(sys.stdout, fieldnames=fnames, lineterminator='\n')
    writer.writeheader()
    if len(outputcsv) > 1: #ファイル一つのときは合計値は出さない
        writer.writerow(csvfieldnames)
    for o in outputcsv:
        writer.writerow(o)
